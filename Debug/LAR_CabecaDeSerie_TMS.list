
LAR_CabecaDeSerie_TMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b3c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004c4c  08004c4c  00005c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c78  08004c78  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c78  08004c78  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c78  08004c78  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c7c  08004c7c  00005c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004c80  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000005c  08004cdc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08004cdc  00006350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000995f  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9a  00000000  00000000  0000f9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00011680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000068e  00000000  00000000  00011f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001758b  00000000  00000000  00012596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae1f  00000000  00000000  00029b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872d3  00000000  00000000  00034940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbc13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026cc  00000000  00000000  000bbc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000be324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004c34 	.word	0x08004c34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08004c34 	.word	0x08004c34

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <adcVoltageConversion>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
float adcVoltageConversion(float volt, uint32_t adc_value)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	float V = (volt*adc_value)/UINT12_MAX;
 80010ba:	6838      	ldr	r0, [r7, #0]
 80010bc:	f7ff fdba 	bl	8000c34 <__aeabi_ui2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fe0d 	bl	8000ce4 <__aeabi_fmul>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4905      	ldr	r1, [pc, #20]	@ (80010e4 <adcVoltageConversion+0x34>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff febc 	bl	8000e4c <__aeabi_fdiv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	60fb      	str	r3, [r7, #12]
	return V;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	457ff000 	.word	0x457ff000

080010e8 <thermistorResistEstimation>:

float thermistorResistEstimation(float R)
{
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	float Rt = (adcVoltageConversion(vcc, rawAdc1Val1)*R)/(vcc-adcVoltageConversion(vcc, rawAdc1Val1));
 80010f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <thermistorResistEstimation+0x80>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	481d      	ldr	r0, [pc, #116]	@ (800116c <thermistorResistEstimation+0x84>)
 80010f8:	f7ff ffda 	bl	80010b0 <adcVoltageConversion>
 80010fc:	4603      	mov	r3, r0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdef 	bl	8000ce4 <__aeabi_fmul>
 8001106:	4603      	mov	r3, r0
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f985 	bl	8000418 <__aeabi_f2d>
 800110e:	4604      	mov	r4, r0
 8001110:	460d      	mov	r5, r1
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <thermistorResistEstimation+0x80>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	4814      	ldr	r0, [pc, #80]	@ (800116c <thermistorResistEstimation+0x84>)
 800111a:	f7ff ffc9 	bl	80010b0 <adcVoltageConversion>
 800111e:	4603      	mov	r3, r0
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f979 	bl	8000418 <__aeabi_f2d>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	a10d      	add	r1, pc, #52	@ (adr r1, 8001160 <thermistorResistEstimation+0x78>)
 800112c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001130:	f7ff f812 	bl	8000158 <__aeabi_dsub>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4620      	mov	r0, r4
 800113a:	4629      	mov	r1, r5
 800113c:	f7ff faee 	bl	800071c <__aeabi_ddiv>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fc6e 	bl	8000a28 <__aeabi_d2f>
 800114c:	4603      	mov	r3, r0
 800114e:	60fb      	str	r3, [r7, #12]
	return Rt;
 8001150:	68fb      	ldr	r3, [r7, #12]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bdb0      	pop	{r4, r5, r7, pc}
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w
 8001160:	66666666 	.word	0x66666666
 8001164:	400a6666 	.word	0x400a6666
 8001168:	200001c0 	.word	0x200001c0
 800116c:	40533333 	.word	0x40533333

08001170 <tempEstimation>:

float tempEstimation(float To, float B,  float Rt, float R0)
{
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	603b      	str	r3, [r7, #0]
	float T = 1/((log(Rt/R0)/B)+(1/To));
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fe63 	bl	8000e4c <__aeabi_fdiv>
 8001186:	4603      	mov	r3, r0
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f945 	bl	8000418 <__aeabi_f2d>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f003 fb61 	bl	800485c <log>
 800119a:	4604      	mov	r4, r0
 800119c:	460d      	mov	r5, r1
 800119e:	68b8      	ldr	r0, [r7, #8]
 80011a0:	f7ff f93a 	bl	8000418 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4620      	mov	r0, r4
 80011aa:	4629      	mov	r1, r5
 80011ac:	f7ff fab6 	bl	800071c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4614      	mov	r4, r2
 80011b6:	461d      	mov	r5, r3
 80011b8:	68f9      	ldr	r1, [r7, #12]
 80011ba:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80011be:	f7ff fe45 	bl	8000e4c <__aeabi_fdiv>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f927 	bl	8000418 <__aeabi_f2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7fe ffc3 	bl	800015c <__adddf3>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4912      	ldr	r1, [pc, #72]	@ (8001228 <tempEstimation+0xb8>)
 80011e0:	f7ff fa9c 	bl	800071c <__aeabi_ddiv>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fc1c 	bl	8000a28 <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	617b      	str	r3, [r7, #20]
	float Tc = T-273.15;
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	f7ff f90f 	bl	8000418 <__aeabi_f2d>
 80011fa:	a309      	add	r3, pc, #36	@ (adr r3, 8001220 <tempEstimation+0xb0>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	f7fe ffaa 	bl	8000158 <__aeabi_dsub>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fc0c 	bl	8000a28 <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	613b      	str	r3, [r7, #16]
	return Tc;
 8001214:	693b      	ldr	r3, [r7, #16]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bdb0      	pop	{r4, r5, r7, pc}
 800121e:	bf00      	nop
 8001220:	66666666 	.word	0x66666666
 8001224:	40711266 	.word	0x40711266
 8001228:	3ff00000 	.word	0x3ff00000

0800122c <mean>:

float mean (float *buffer, int size)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
	float count = 0;
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<size; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	e00d      	b.n	800125e <mean+0x32>
	{
		count += buffer[i];
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff fc40 	bl	8000ad4 <__addsf3>
 8001254:	4603      	mov	r3, r0
 8001256:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<size; i++)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	3301      	adds	r3, #1
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	dbed      	blt.n	8001242 <mean+0x16>
	}
	float mean = count/size;
 8001266:	6838      	ldr	r0, [r7, #0]
 8001268:	f7ff fce8 	bl	8000c3c <__aeabi_i2f>
 800126c:	4603      	mov	r3, r0
 800126e:	4619      	mov	r1, r3
 8001270:	6978      	ldr	r0, [r7, #20]
 8001272:	f7ff fdeb 	bl	8000e4c <__aeabi_fdiv>
 8001276:	4603      	mov	r3, r0
 8001278:	60fb      	str	r3, [r7, #12]
	return mean;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

	rawAdc1Val1 = dmaBuffer[0];
 800128c:	4b35      	ldr	r3, [pc, #212]	@ (8001364 <HAL_ADC_ConvCpltCallback+0xe0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a35      	ldr	r2, [pc, #212]	@ (8001368 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001292:	6013      	str	r3, [r2, #0]
	rawAdc1Val2 = dmaBuffer[1];
 8001294:	4b33      	ldr	r3, [pc, #204]	@ (8001364 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4a34      	ldr	r2, [pc, #208]	@ (800136c <HAL_ADC_ConvCpltCallback+0xe8>)
 800129a:	6013      	str	r3, [r2, #0]
	rawVoltage = adcVoltageConversion(vcc, rawAdc1Val1);
 800129c:	4b32      	ldr	r3, [pc, #200]	@ (8001368 <HAL_ADC_ConvCpltCallback+0xe4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4833      	ldr	r0, [pc, #204]	@ (8001370 <HAL_ADC_ConvCpltCallback+0xec>)
 80012a4:	f7ff ff04 	bl	80010b0 <adcVoltageConversion>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a32      	ldr	r2, [pc, #200]	@ (8001374 <HAL_ADC_ConvCpltCallback+0xf0>)
 80012ac:	6013      	str	r3, [r2, #0]
	rawBatVoltage = adcVoltageConversion(batMaxVoltage, rawAdc1Val2);
 80012ae:	4b2f      	ldr	r3, [pc, #188]	@ (800136c <HAL_ADC_ConvCpltCallback+0xe8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4830      	ldr	r0, [pc, #192]	@ (8001378 <HAL_ADC_ConvCpltCallback+0xf4>)
 80012b6:	f7ff fefb 	bl	80010b0 <adcVoltageConversion>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a2f      	ldr	r2, [pc, #188]	@ (800137c <HAL_ADC_ConvCpltCallback+0xf8>)
 80012be:	6013      	str	r3, [r2, #0]
	thermistorResist = thermistorResistEstimation(upperResist);
 80012c0:	482f      	ldr	r0, [pc, #188]	@ (8001380 <HAL_ADC_ConvCpltCallback+0xfc>)
 80012c2:	f7ff ff11 	bl	80010e8 <thermistorResistEstimation>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001384 <HAL_ADC_ConvCpltCallback+0x100>)
 80012ca:	6013      	str	r3, [r2, #0]
	rawTemp = tempEstimation(nominalTemp, beta, thermistorResist, thermistorNominalResist);
 80012cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001384 <HAL_ADC_ConvCpltCallback+0x100>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <HAL_ADC_ConvCpltCallback+0xfc>)
 80012d2:	492d      	ldr	r1, [pc, #180]	@ (8001388 <HAL_ADC_ConvCpltCallback+0x104>)
 80012d4:	482d      	ldr	r0, [pc, #180]	@ (800138c <HAL_ADC_ConvCpltCallback+0x108>)
 80012d6:	f7ff ff4b 	bl	8001170 <tempEstimation>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001390 <HAL_ADC_ConvCpltCallback+0x10c>)
 80012de:	6013      	str	r3, [r2, #0]
	tempBuffer [indx%meanBufferSize] = rawTemp;
 80012e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <HAL_ADC_ConvCpltCallback+0x110>)
 80012e2:	6819      	ldr	r1, [r3, #0]
 80012e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001398 <HAL_ADC_ConvCpltCallback+0x114>)
 80012e6:	fb83 2301 	smull	r2, r3, r3, r1
 80012ea:	105a      	asrs	r2, r3, #1
 80012ec:	17cb      	asrs	r3, r1, #31
 80012ee:	1ad2      	subs	r2, r2, r3
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	1aca      	subs	r2, r1, r3
 80012f8:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <HAL_ADC_ConvCpltCallback+0x10c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4927      	ldr	r1, [pc, #156]	@ (800139c <HAL_ADC_ConvCpltCallback+0x118>)
 80012fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	batVoltageBuffer [indx%meanBufferSize] = rawBatVoltage;
 8001302:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <HAL_ADC_ConvCpltCallback+0x110>)
 8001304:	6819      	ldr	r1, [r3, #0]
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_ADC_ConvCpltCallback+0x114>)
 8001308:	fb83 2301 	smull	r2, r3, r3, r1
 800130c:	105a      	asrs	r2, r3, #1
 800130e:	17cb      	asrs	r3, r1, #31
 8001310:	1ad2      	subs	r2, r2, r3
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	1aca      	subs	r2, r1, r3
 800131a:	4b18      	ldr	r3, [pc, #96]	@ (800137c <HAL_ADC_ConvCpltCallback+0xf8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4920      	ldr	r1, [pc, #128]	@ (80013a0 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001320:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	batVoltage = mean(batVoltageBuffer, meanBufferSize);
 8001324:	2105      	movs	r1, #5
 8001326:	481e      	ldr	r0, [pc, #120]	@ (80013a0 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001328:	f7ff ff80 	bl	800122c <mean>
 800132c:	4603      	mov	r3, r0
 800132e:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <HAL_ADC_ConvCpltCallback+0x120>)
 8001330:	6013      	str	r3, [r2, #0]
	tempMean = mean(tempBuffer, meanBufferSize);
 8001332:	2105      	movs	r1, #5
 8001334:	4819      	ldr	r0, [pc, #100]	@ (800139c <HAL_ADC_ConvCpltCallback+0x118>)
 8001336:	f7ff ff79 	bl	800122c <mean>
 800133a:	4603      	mov	r3, r0
 800133c:	4a1a      	ldr	r2, [pc, #104]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0x124>)
 800133e:	6013      	str	r3, [r2, #0]
	txData[0] = tempMean;
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0x124>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fe93 	bl	8001070 <__aeabi_f2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_ADC_ConvCpltCallback+0x128>)
 8001350:	701a      	strb	r2, [r3, #0]
	indx++;
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_ADC_ConvCpltCallback+0x110>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a0e      	ldr	r2, [pc, #56]	@ (8001394 <HAL_ADC_ConvCpltCallback+0x110>)
 800135a:	6013      	str	r3, [r2, #0]

}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200001c4 	.word	0x200001c4
 8001368:	200001c0 	.word	0x200001c0
 800136c:	200001cc 	.word	0x200001cc
 8001370:	40533333 	.word	0x40533333
 8001374:	200001d4 	.word	0x200001d4
 8001378:	4149999a 	.word	0x4149999a
 800137c:	200001f4 	.word	0x200001f4
 8001380:	47c35000 	.word	0x47c35000
 8001384:	200001d0 	.word	0x200001d0
 8001388:	4576e000 	.word	0x4576e000
 800138c:	43951333 	.word	0x43951333
 8001390:	200001d8 	.word	0x200001d8
 8001394:	20000210 	.word	0x20000210
 8001398:	66666667 	.word	0x66666667
 800139c:	200001dc 	.word	0x200001dc
 80013a0:	200001f8 	.word	0x200001f8
 80013a4:	2000020c 	.word	0x2000020c
 80013a8:	200001f0 	.word	0x200001f0
 80013ac:	200001bc 	.word	0x200001bc

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f000 fba8 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 f84c 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f000 f94c 	bl	8001658 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c0:	f000 f91c 	bl	80015fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013c4:	f000 f8f0 	bl	80015a8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80013c8:	f000 f8a0 	bl	800150c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN Init */
    HAL_ADC_Start_IT(&hadc1);
 80013cc:	4818      	ldr	r0, [pc, #96]	@ (8001430 <main+0x80>)
 80013ce:	f000 fcf9 	bl	8001dc4 <HAL_ADC_Start_IT>
    HAL_ADC_Start_DMA(&hadc1, dmaBuffer, 2);
 80013d2:	2202      	movs	r2, #2
 80013d4:	4917      	ldr	r1, [pc, #92]	@ (8001434 <main+0x84>)
 80013d6:	4816      	ldr	r0, [pc, #88]	@ (8001430 <main+0x80>)
 80013d8:	f000 fdaa 	bl	8001f30 <HAL_ADC_Start_DMA>
    HAL_UART_Transmit_DMA(&huart2, txData, 1);
 80013dc:	2201      	movs	r2, #1
 80013de:	4916      	ldr	r1, [pc, #88]	@ (8001438 <main+0x88>)
 80013e0:	4816      	ldr	r0, [pc, #88]	@ (800143c <main+0x8c>)
 80013e2:	f002 fbe3 	bl	8003bac <HAL_UART_Transmit_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (batVoltage==7.5 || tempMean > 50)
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <main+0x90>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4916      	ldr	r1, [pc, #88]	@ (8001444 <main+0x94>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe0d 	bl	800100c <__aeabi_fcmpeq>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d108      	bne.n	800140a <main+0x5a>
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <main+0x98>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4913      	ldr	r1, [pc, #76]	@ (800144c <main+0x9c>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fe2c 	bl	800105c <__aeabi_fcmpgt>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <main+0x68>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001410:	480f      	ldr	r0, [pc, #60]	@ (8001450 <main+0xa0>)
 8001412:	f001 fe7b 	bl	800310c <HAL_GPIO_WritePin>
 8001416:	e005      	b.n	8001424 <main+0x74>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800141e:	480c      	ldr	r0, [pc, #48]	@ (8001450 <main+0xa0>)
 8001420:	f001 fe74 	bl	800310c <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(300);
 8001424:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001428:	f000 fbd0 	bl	8001bcc <HAL_Delay>
	  if (batVoltage==7.5 || tempMean > 50)
 800142c:	e7db      	b.n	80013e6 <main+0x36>
 800142e:	bf00      	nop
 8001430:	20000078 	.word	0x20000078
 8001434:	200001c4 	.word	0x200001c4
 8001438:	200001bc 	.word	0x200001bc
 800143c:	200000ec 	.word	0x200000ec
 8001440:	2000020c 	.word	0x2000020c
 8001444:	40f00000 	.word	0x40f00000
 8001448:	200001f0 	.word	0x200001f0
 800144c:	42480000 	.word	0x42480000
 8001450:	40011000 	.word	0x40011000

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	@ 0x50
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	2228      	movs	r2, #40	@ 0x28
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f003 f9c8 	bl	80047f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001484:	2301      	movs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001488:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800148c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001492:	2301      	movs	r3, #1
 8001494:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001496:	2302      	movs	r3, #2
 8001498:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800149e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014a0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 fe68 	bl	8003180 <HAL_RCC_OscConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014b6:	f000 f953 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ba:	230f      	movs	r3, #15
 80014bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2102      	movs	r1, #2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 f8d4 	bl	8003684 <HAL_RCC_ClockConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014e2:	f000 f93d 	bl	8001760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014e6:	2302      	movs	r3, #2
 80014e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fa54 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014fe:	f000 f92f 	bl	8001760 <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3750      	adds	r7, #80	@ 0x50
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800151c:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <MX_ADC1_Init+0x94>)
 800151e:	4a21      	ldr	r2, [pc, #132]	@ (80015a4 <MX_ADC1_Init+0x98>)
 8001520:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <MX_ADC1_Init+0x94>)
 8001524:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800152a:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <MX_ADC1_Init+0x94>)
 800152c:	2201      	movs	r2, #1
 800152e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001530:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <MX_ADC1_Init+0x94>)
 8001532:	2200      	movs	r2, #0
 8001534:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001536:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <MX_ADC1_Init+0x94>)
 8001538:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800153c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <MX_ADC1_Init+0x94>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <MX_ADC1_Init+0x94>)
 8001546:	2202      	movs	r2, #2
 8001548:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800154a:	4815      	ldr	r0, [pc, #84]	@ (80015a0 <MX_ADC1_Init+0x94>)
 800154c:	f000 fb62 	bl	8001c14 <HAL_ADC_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001556:	f000 f903 	bl	8001760 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800155e:	2301      	movs	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <MX_ADC1_Init+0x94>)
 800156c:	f000 fe98 	bl	80022a0 <HAL_ADC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001576:	f000 f8f3 	bl	8001760 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800157a:	2301      	movs	r3, #1
 800157c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800157e:	2302      	movs	r3, #2
 8001580:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	@ (80015a0 <MX_ADC1_Init+0x94>)
 8001588:	f000 fe8a 	bl	80022a0 <HAL_ADC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001592:	f000 f8e5 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000078 	.word	0x20000078
 80015a4:	40012400 	.word	0x40012400

080015a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	@ (80015f8 <MX_USART2_UART_Init+0x50>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015e0:	f002 fa94 	bl	8003b0c <HAL_UART_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ea:	f000 f8b9 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200000ec 	.word	0x200000ec
 80015f8:	40004400 	.word	0x40004400

080015fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001602:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <MX_DMA_Init+0x58>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a13      	ldr	r2, [pc, #76]	@ (8001654 <MX_DMA_Init+0x58>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6153      	str	r3, [r2, #20]
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <MX_DMA_Init+0x58>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	200b      	movs	r0, #11
 8001620:	f001 f917 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001624:	200b      	movs	r0, #11
 8001626:	f001 f930 	bl	800288a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	2010      	movs	r0, #16
 8001630:	f001 f90f 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001634:	2010      	movs	r0, #16
 8001636:	f001 f928 	bl	800288a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2011      	movs	r0, #17
 8001640:	f001 f907 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001644:	2011      	movs	r0, #17
 8001646:	f001 f920 	bl	800288a <HAL_NVIC_EnableIRQ>

}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166c:	4b38      	ldr	r3, [pc, #224]	@ (8001750 <MX_GPIO_Init+0xf8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a37      	ldr	r2, [pc, #220]	@ (8001750 <MX_GPIO_Init+0xf8>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b35      	ldr	r3, [pc, #212]	@ (8001750 <MX_GPIO_Init+0xf8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001684:	4b32      	ldr	r3, [pc, #200]	@ (8001750 <MX_GPIO_Init+0xf8>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a31      	ldr	r2, [pc, #196]	@ (8001750 <MX_GPIO_Init+0xf8>)
 800168a:	f043 0320 	orr.w	r3, r3, #32
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <MX_GPIO_Init+0xf8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <MX_GPIO_Init+0xf8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001750 <MX_GPIO_Init+0xf8>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <MX_GPIO_Init+0xf8>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b4:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <MX_GPIO_Init+0xf8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a25      	ldr	r2, [pc, #148]	@ (8001750 <MX_GPIO_Init+0xf8>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <MX_GPIO_Init+0xf8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2120      	movs	r1, #32
 80016d0:	4820      	ldr	r0, [pc, #128]	@ (8001754 <MX_GPIO_Init+0xfc>)
 80016d2:	f001 fd1b 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016dc:	481e      	ldr	r0, [pc, #120]	@ (8001758 <MX_GPIO_Init+0x100>)
 80016de:	f001 fd15 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e8:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <MX_GPIO_Init+0x104>)
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4619      	mov	r1, r3
 80016f6:	4818      	ldr	r0, [pc, #96]	@ (8001758 <MX_GPIO_Init+0x100>)
 80016f8:	f001 fb84 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016fc:	2320      	movs	r3, #32
 80016fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2302      	movs	r3, #2
 800170a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	4810      	ldr	r0, [pc, #64]	@ (8001754 <MX_GPIO_Init+0xfc>)
 8001714:	f001 fb76 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001718:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800171c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2302      	movs	r3, #2
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4619      	mov	r1, r3
 8001730:	4809      	ldr	r0, [pc, #36]	@ (8001758 <MX_GPIO_Init+0x100>)
 8001732:	f001 fb67 	bl	8002e04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2028      	movs	r0, #40	@ 0x28
 800173c:	f001 f889 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001740:	2028      	movs	r0, #40	@ 0x28
 8001742:	f001 f8a2 	bl	800288a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	40010800 	.word	0x40010800
 8001758:	40011000 	.word	0x40011000
 800175c:	10110000 	.word	0x10110000

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <Error_Handler+0x8>

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_MspInit+0x5c>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <HAL_MspInit+0x5c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_MspInit+0x5c>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_MspInit+0x5c>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a0e      	ldr	r2, [pc, #56]	@ (80017c8 <HAL_MspInit+0x5c>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <HAL_MspInit+0x5c>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_MspInit+0x60>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <HAL_MspInit+0x60>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000

080017d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a2c      	ldr	r2, [pc, #176]	@ (800189c <HAL_ADC_MspInit+0xcc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d151      	bne.n	8001894 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017f0:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <HAL_ADC_MspInit+0xd0>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a2a      	ldr	r2, [pc, #168]	@ (80018a0 <HAL_ADC_MspInit+0xd0>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <HAL_ADC_MspInit+0xd0>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <HAL_ADC_MspInit+0xd0>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a24      	ldr	r2, [pc, #144]	@ (80018a0 <HAL_ADC_MspInit+0xd0>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <HAL_ADC_MspInit+0xd0>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001820:	2303      	movs	r3, #3
 8001822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001824:	2303      	movs	r3, #3
 8001826:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4619      	mov	r1, r3
 800182e:	481d      	ldr	r0, [pc, #116]	@ (80018a4 <HAL_ADC_MspInit+0xd4>)
 8001830:	f001 fae8 	bl	8002e04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001834:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <HAL_ADC_MspInit+0xd8>)
 8001836:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <HAL_ADC_MspInit+0xdc>)
 8001838:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183a:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_ADC_MspInit+0xd8>)
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <HAL_ADC_MspInit+0xd8>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <HAL_ADC_MspInit+0xd8>)
 8001848:	2280      	movs	r2, #128	@ 0x80
 800184a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <HAL_ADC_MspInit+0xd8>)
 800184e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001852:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <HAL_ADC_MspInit+0xd8>)
 8001856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800185a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_ADC_MspInit+0xd8>)
 800185e:	2220      	movs	r2, #32
 8001860:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001862:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_ADC_MspInit+0xd8>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001868:	480f      	ldr	r0, [pc, #60]	@ (80018a8 <HAL_ADC_MspInit+0xd8>)
 800186a:	f001 f829 	bl	80028c0 <HAL_DMA_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001874:	f7ff ff74 	bl	8001760 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <HAL_ADC_MspInit+0xd8>)
 800187c:	621a      	str	r2, [r3, #32]
 800187e:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <HAL_ADC_MspInit+0xd8>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	2012      	movs	r0, #18
 800188a:	f000 ffe2 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800188e:	2012      	movs	r0, #18
 8001890:	f000 fffb 	bl	800288a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001894:	bf00      	nop
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40012400 	.word	0x40012400
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010800 	.word	0x40010800
 80018a8:	200000a8 	.word	0x200000a8
 80018ac:	40020008 	.word	0x40020008

080018b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a3f      	ldr	r2, [pc, #252]	@ (80019c8 <HAL_UART_MspInit+0x118>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d177      	bne.n	80019c0 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d0:	4b3e      	ldr	r3, [pc, #248]	@ (80019cc <HAL_UART_MspInit+0x11c>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	4a3d      	ldr	r2, [pc, #244]	@ (80019cc <HAL_UART_MspInit+0x11c>)
 80018d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018da:	61d3      	str	r3, [r2, #28]
 80018dc:	4b3b      	ldr	r3, [pc, #236]	@ (80019cc <HAL_UART_MspInit+0x11c>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b38      	ldr	r3, [pc, #224]	@ (80019cc <HAL_UART_MspInit+0x11c>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a37      	ldr	r2, [pc, #220]	@ (80019cc <HAL_UART_MspInit+0x11c>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <HAL_UART_MspInit+0x11c>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001900:	230c      	movs	r3, #12
 8001902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2302      	movs	r3, #2
 800190a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4619      	mov	r1, r3
 8001912:	482f      	ldr	r0, [pc, #188]	@ (80019d0 <HAL_UART_MspInit+0x120>)
 8001914:	f001 fa76 	bl	8002e04 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001918:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <HAL_UART_MspInit+0x124>)
 800191a:	4a2f      	ldr	r2, [pc, #188]	@ (80019d8 <HAL_UART_MspInit+0x128>)
 800191c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191e:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_UART_MspInit+0x124>)
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_UART_MspInit+0x124>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800192a:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <HAL_UART_MspInit+0x124>)
 800192c:	2280      	movs	r2, #128	@ 0x80
 800192e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001930:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <HAL_UART_MspInit+0x124>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001936:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <HAL_UART_MspInit+0x124>)
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800193c:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <HAL_UART_MspInit+0x124>)
 800193e:	2220      	movs	r2, #32
 8001940:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001942:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <HAL_UART_MspInit+0x124>)
 8001944:	2200      	movs	r2, #0
 8001946:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001948:	4822      	ldr	r0, [pc, #136]	@ (80019d4 <HAL_UART_MspInit+0x124>)
 800194a:	f000 ffb9 	bl	80028c0 <HAL_DMA_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8001954:	f7ff ff04 	bl	8001760 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a1e      	ldr	r2, [pc, #120]	@ (80019d4 <HAL_UART_MspInit+0x124>)
 800195c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800195e:	4a1d      	ldr	r2, [pc, #116]	@ (80019d4 <HAL_UART_MspInit+0x124>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001964:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <HAL_UART_MspInit+0x12c>)
 8001966:	4a1e      	ldr	r2, [pc, #120]	@ (80019e0 <HAL_UART_MspInit+0x130>)
 8001968:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <HAL_UART_MspInit+0x12c>)
 800196c:	2210      	movs	r2, #16
 800196e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <HAL_UART_MspInit+0x12c>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <HAL_UART_MspInit+0x12c>)
 8001978:	2280      	movs	r2, #128	@ 0x80
 800197a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197c:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <HAL_UART_MspInit+0x12c>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001982:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <HAL_UART_MspInit+0x12c>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <HAL_UART_MspInit+0x12c>)
 800198a:	2220      	movs	r2, #32
 800198c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800198e:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <HAL_UART_MspInit+0x12c>)
 8001990:	2200      	movs	r2, #0
 8001992:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001994:	4811      	ldr	r0, [pc, #68]	@ (80019dc <HAL_UART_MspInit+0x12c>)
 8001996:	f000 ff93 	bl	80028c0 <HAL_DMA_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80019a0:	f7ff fede 	bl	8001760 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a0d      	ldr	r2, [pc, #52]	@ (80019dc <HAL_UART_MspInit+0x12c>)
 80019a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80019aa:	4a0c      	ldr	r2, [pc, #48]	@ (80019dc <HAL_UART_MspInit+0x12c>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2026      	movs	r0, #38	@ 0x26
 80019b6:	f000 ff4c 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ba:	2026      	movs	r0, #38	@ 0x26
 80019bc:	f000 ff65 	bl	800288a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80019c0:	bf00      	nop
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40004400 	.word	0x40004400
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010800 	.word	0x40010800
 80019d4:	20000134 	.word	0x20000134
 80019d8:	4002006c 	.word	0x4002006c
 80019dc:	20000178 	.word	0x20000178
 80019e0:	40020080 	.word	0x40020080

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <NMI_Handler+0x4>

080019ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <MemManage_Handler+0x4>

080019fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f8ae 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <DMA1_Channel1_IRQHandler+0x10>)
 8001a42:	f001 f8ab 	bl	8002b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200000a8 	.word	0x200000a8

08001a50 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <DMA1_Channel6_IRQHandler+0x10>)
 8001a56:	f001 f8a1 	bl	8002b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000134 	.word	0x20000134

08001a64 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <DMA1_Channel7_IRQHandler+0x10>)
 8001a6a:	f001 f897 	bl	8002b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000178 	.word	0x20000178

08001a78 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <ADC1_2_IRQHandler+0x10>)
 8001a7e:	f000 fb35 	bl	80020ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000078 	.word	0x20000078

08001a8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <USART2_IRQHandler+0x10>)
 8001a92:	f002 f8fb 	bl	8003c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200000ec 	.word	0x200000ec

08001aa0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001aa4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001aa8:	f001 fb48 	bl	800313c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001abc:	f7ff fff8 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac0:	480b      	ldr	r0, [pc, #44]	@ (8001af0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ac2:	490c      	ldr	r1, [pc, #48]	@ (8001af4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8001af8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a09      	ldr	r2, [pc, #36]	@ (8001afc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ad8:	4c09      	ldr	r4, [pc, #36]	@ (8001b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f002 fe95 	bl	8004814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aea:	f7ff fc61 	bl	80013b0 <main>
  bx lr
 8001aee:	4770      	bx	lr
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001af8:	08004c80 	.word	0x08004c80
  ldr r2, =_sbss
 8001afc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b00:	20000350 	.word	0x20000350

08001b04 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <CAN1_RX1_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <HAL_Init+0x28>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a07      	ldr	r2, [pc, #28]	@ (8001b30 <HAL_Init+0x28>)
 8001b12:	f043 0310 	orr.w	r3, r3, #16
 8001b16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b18:	2003      	movs	r0, #3
 8001b1a:	f000 fe8f 	bl	800283c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f000 f808 	bl	8001b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b24:	f7ff fe22 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40022000 	.word	0x40022000

08001b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_InitTick+0x54>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_InitTick+0x58>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fea7 	bl	80028a6 <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00e      	b.n	8001b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d80a      	bhi.n	8001b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f000 fe6f 	bl	8002852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b74:	4a06      	ldr	r2, [pc, #24]	@ (8001b90 <HAL_InitTick+0x5c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_IncTick+0x1c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <HAL_IncTick+0x20>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a03      	ldr	r2, [pc, #12]	@ (8001bb4 <HAL_IncTick+0x20>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000214 	.word	0x20000214

08001bb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b02      	ldr	r3, [pc, #8]	@ (8001bc8 <HAL_GetTick+0x10>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	20000214 	.word	0x20000214

08001bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fff0 	bl	8001bb8 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d005      	beq.n	8001bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <HAL_Delay+0x44>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf2:	bf00      	nop
 8001bf4:	f7ff ffe0 	bl	8001bb8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d8f7      	bhi.n	8001bf4 <HAL_Delay+0x28>
  {
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000008 	.word	0x20000008

08001c14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0be      	b.n	8001db4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fdbc 	bl	80017d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fc73 	bl	8002544 <ADC_ConversionStop_Disable>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 8099 	bne.w	8001da2 <HAL_ADC_Init+0x18e>
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 8095 	bne.w	8001da2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c80:	f023 0302 	bic.w	r3, r3, #2
 8001c84:	f043 0202 	orr.w	r2, r3, #2
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7b1b      	ldrb	r3, [r3, #12]
 8001c9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cac:	d003      	beq.n	8001cb6 <HAL_ADC_Init+0xa2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_ADC_Init+0xa8>
 8001cb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cba:	e000      	b.n	8001cbe <HAL_ADC_Init+0xaa>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7d1b      	ldrb	r3, [r3, #20]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d119      	bne.n	8001d00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7b1b      	ldrb	r3, [r3, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	035a      	lsls	r2, r3, #13
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	e00b      	b.n	8001d00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	f043 0220 	orr.w	r2, r3, #32
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	4b28      	ldr	r3, [pc, #160]	@ (8001dbc <HAL_ADC_Init+0x1a8>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d30:	d003      	beq.n	8001d3a <HAL_ADC_Init+0x126>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d104      	bne.n	8001d44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	051b      	lsls	r3, r3, #20
 8001d42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <HAL_ADC_Init+0x1ac>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d10b      	bne.n	8001d80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	f023 0303 	bic.w	r3, r3, #3
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d7e:	e018      	b.n	8001db2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d84:	f023 0312 	bic.w	r3, r3, #18
 8001d88:	f043 0210 	orr.w	r2, r3, #16
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001da0:	e007      	b.n	8001db2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	f043 0210 	orr.w	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	ffe1f7fd 	.word	0xffe1f7fd
 8001dc0:	ff1f0efe 	.word	0xff1f0efe

08001dc4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_Start_IT+0x1a>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e0a0      	b.n	8001f20 <HAL_ADC_Start_IT+0x15c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fb52 	bl	8002490 <ADC_Enable>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 808f 	bne.w	8001f16 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a45      	ldr	r2, [pc, #276]	@ (8001f28 <HAL_ADC_Start_IT+0x164>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d105      	bne.n	8001e22 <HAL_ADC_Start_IT+0x5e>
 8001e16:	4b45      	ldr	r3, [pc, #276]	@ (8001f2c <HAL_ADC_Start_IT+0x168>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d115      	bne.n	8001e4e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e26:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d026      	beq.n	8001e8a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e44:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e4c:	e01d      	b.n	8001e8a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a33      	ldr	r2, [pc, #204]	@ (8001f2c <HAL_ADC_Start_IT+0x168>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d004      	beq.n	8001e6e <HAL_ADC_Start_IT+0xaa>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2f      	ldr	r2, [pc, #188]	@ (8001f28 <HAL_ADC_Start_IT+0x164>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10d      	bne.n	8001e8a <HAL_ADC_Start_IT+0xc6>
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f2c <HAL_ADC_Start_IT+0x168>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9a:	f023 0206 	bic.w	r2, r3, #6
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ea2:	e002      	b.n	8001eaa <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f06f 0202 	mvn.w	r2, #2
 8001eba:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ed6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001eda:	d113      	bne.n	8001f04 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ee0:	4a11      	ldr	r2, [pc, #68]	@ (8001f28 <HAL_ADC_Start_IT+0x164>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d105      	bne.n	8001ef2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ee6:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <HAL_ADC_Start_IT+0x168>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	e00c      	b.n	8001f1e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	e003      	b.n	8001f1e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40012800 	.word	0x40012800
 8001f2c:	40012400 	.word	0x40012400

08001f30 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a64      	ldr	r2, [pc, #400]	@ (80020d8 <HAL_ADC_Start_DMA+0x1a8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_ADC_Start_DMA+0x24>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a63      	ldr	r2, [pc, #396]	@ (80020dc <HAL_ADC_Start_DMA+0x1ac>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d106      	bne.n	8001f62 <HAL_ADC_Start_DMA+0x32>
 8001f54:	4b60      	ldr	r3, [pc, #384]	@ (80020d8 <HAL_ADC_Start_DMA+0x1a8>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 80b3 	bne.w	80020c8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_Start_DMA+0x40>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e0ae      	b.n	80020ce <HAL_ADC_Start_DMA+0x19e>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fa89 	bl	8002490 <ADC_Enable>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f040 809a 	bne.w	80020be <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a4e      	ldr	r2, [pc, #312]	@ (80020dc <HAL_ADC_Start_DMA+0x1ac>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_Start_DMA+0x84>
 8001fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80020d8 <HAL_ADC_Start_DMA+0x1a8>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d115      	bne.n	8001fe0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d026      	beq.n	800201c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fd6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fde:	e01d      	b.n	800201c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a39      	ldr	r2, [pc, #228]	@ (80020d8 <HAL_ADC_Start_DMA+0x1a8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_ADC_Start_DMA+0xd0>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a38      	ldr	r2, [pc, #224]	@ (80020dc <HAL_ADC_Start_DMA+0x1ac>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d10d      	bne.n	800201c <HAL_ADC_Start_DMA+0xec>
 8002000:	4b35      	ldr	r3, [pc, #212]	@ (80020d8 <HAL_ADC_Start_DMA+0x1a8>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002010:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002014:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	f023 0206 	bic.w	r2, r3, #6
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002034:	e002      	b.n	800203c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4a25      	ldr	r2, [pc, #148]	@ (80020e0 <HAL_ADC_Start_DMA+0x1b0>)
 800204a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a24      	ldr	r2, [pc, #144]	@ (80020e4 <HAL_ADC_Start_DMA+0x1b4>)
 8002052:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a23      	ldr	r2, [pc, #140]	@ (80020e8 <HAL_ADC_Start_DMA+0x1b8>)
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0202 	mvn.w	r2, #2
 8002064:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002074:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a18      	ldr	r0, [r3, #32]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	334c      	adds	r3, #76	@ 0x4c
 8002080:	4619      	mov	r1, r3
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f000 fc75 	bl	8002974 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002094:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002098:	d108      	bne.n	80020ac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80020a8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020aa:	e00f      	b.n	80020cc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80020ba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020bc:	e006      	b.n	80020cc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80020c6:	e001      	b.n	80020cc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40012400 	.word	0x40012400
 80020dc:	40012800 	.word	0x40012800
 80020e0:	080025c7 	.word	0x080025c7
 80020e4:	08002643 	.word	0x08002643
 80020e8:	0800265f 	.word	0x0800265f

080020ec <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b00      	cmp	r3, #0
 800210c:	d03e      	beq.n	800218c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d039      	beq.n	800218c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002128:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800213a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800213e:	d11d      	bne.n	800217c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002144:	2b00      	cmp	r3, #0
 8002146:	d119      	bne.n	800217c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0220 	bic.w	r2, r2, #32
 8002156:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff f881 	bl	8001284 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f06f 0212 	mvn.w	r2, #18
 800218a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002192:	2b00      	cmp	r3, #0
 8002194:	d04d      	beq.n	8002232 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d048      	beq.n	8002232 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80021c2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80021c6:	d012      	beq.n	80021ee <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d125      	bne.n	8002222 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80021e0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021e4:	d11d      	bne.n	8002222 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d119      	bne.n	8002222 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021fc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002202:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fa35 	bl	8002692 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 020c 	mvn.w	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d012      	beq.n	8002262 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f812 	bl	800227c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0201 	mvn.w	r2, #1
 8002260:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x20>
 80022bc:	2302      	movs	r3, #2
 80022be:	e0dc      	b.n	800247a <HAL_ADC_ConfigChannel+0x1da>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b06      	cmp	r3, #6
 80022ce:	d81c      	bhi.n	800230a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	3b05      	subs	r3, #5
 80022e2:	221f      	movs	r2, #31
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	4019      	ands	r1, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	3b05      	subs	r3, #5
 80022fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	635a      	str	r2, [r3, #52]	@ 0x34
 8002308:	e03c      	b.n	8002384 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d81c      	bhi.n	800234c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	3b23      	subs	r3, #35	@ 0x23
 8002324:	221f      	movs	r2, #31
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	4019      	ands	r1, r3
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	3b23      	subs	r3, #35	@ 0x23
 800233e:	fa00 f203 	lsl.w	r2, r0, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	631a      	str	r2, [r3, #48]	@ 0x30
 800234a:	e01b      	b.n	8002384 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	3b41      	subs	r3, #65	@ 0x41
 800235e:	221f      	movs	r2, #31
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	4019      	ands	r1, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	3b41      	subs	r3, #65	@ 0x41
 8002378:	fa00 f203 	lsl.w	r2, r0, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b09      	cmp	r3, #9
 800238a:	d91c      	bls.n	80023c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68d9      	ldr	r1, [r3, #12]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	3b1e      	subs	r3, #30
 800239e:	2207      	movs	r2, #7
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4019      	ands	r1, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6898      	ldr	r0, [r3, #8]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	3b1e      	subs	r3, #30
 80023b8:	fa00 f203 	lsl.w	r2, r0, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]
 80023c4:	e019      	b.n	80023fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6919      	ldr	r1, [r3, #16]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	2207      	movs	r2, #7
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	4019      	ands	r1, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6898      	ldr	r0, [r3, #8]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	fa00 f203 	lsl.w	r2, r0, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d003      	beq.n	800240a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002406:	2b11      	cmp	r3, #17
 8002408:	d132      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1d      	ldr	r2, [pc, #116]	@ (8002484 <HAL_ADC_ConfigChannel+0x1e4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d125      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d126      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002430:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b10      	cmp	r3, #16
 8002438:	d11a      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800243a:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <HAL_ADC_ConfigChannel+0x1e8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a13      	ldr	r2, [pc, #76]	@ (800248c <HAL_ADC_ConfigChannel+0x1ec>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	0c9a      	lsrs	r2, r3, #18
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002450:	e002      	b.n	8002458 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	3b01      	subs	r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f9      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x1b2>
 800245e:	e007      	b.n	8002470 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002464:	f043 0220 	orr.w	r2, r3, #32
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002478:	7bfb      	ldrb	r3, [r7, #15]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	40012400 	.word	0x40012400
 8002488:	20000000 	.word	0x20000000
 800248c:	431bde83 	.word	0x431bde83

08002490 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d040      	beq.n	8002530 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024be:	4b1f      	ldr	r3, [pc, #124]	@ (800253c <ADC_Enable+0xac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002540 <ADC_Enable+0xb0>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	0c9b      	lsrs	r3, r3, #18
 80024ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024cc:	e002      	b.n	80024d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f9      	bne.n	80024ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024da:	f7ff fb6d 	bl	8001bb8 <HAL_GetTick>
 80024de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024e0:	e01f      	b.n	8002522 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024e2:	f7ff fb69 	bl	8001bb8 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d918      	bls.n	8002522 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d011      	beq.n	8002522 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002502:	f043 0210 	orr.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e007      	b.n	8002532 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d1d8      	bne.n	80024e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000
 8002540:	431bde83 	.word	0x431bde83

08002544 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d12e      	bne.n	80025bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800256e:	f7ff fb23 	bl	8001bb8 <HAL_GetTick>
 8002572:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002574:	e01b      	b.n	80025ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002576:	f7ff fb1f 	bl	8001bb8 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d914      	bls.n	80025ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d10d      	bne.n	80025ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002596:	f043 0210 	orr.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e007      	b.n	80025be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d0dc      	beq.n	8002576 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d127      	bne.n	8002630 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025fa:	d115      	bne.n	8002628 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002600:	2b00      	cmp	r3, #0
 8002602:	d111      	bne.n	8002628 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7fe fe2b 	bl	8001284 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800262e:	e004      	b.n	800263a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	4798      	blx	r3
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff fe0a 	bl	800226a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	f043 0204 	orr.w	r2, r3, #4
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7ff fe02 	bl	800228e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4906      	ldr	r1, [pc, #24]	@ (800273c <__NVIC_EnableIRQ+0x34>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db0a      	blt.n	800276a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	490c      	ldr	r1, [pc, #48]	@ (800278c <__NVIC_SetPriority+0x4c>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	440b      	add	r3, r1
 8002764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002768:	e00a      	b.n	8002780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4908      	ldr	r1, [pc, #32]	@ (8002790 <__NVIC_SetPriority+0x50>)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	3b04      	subs	r3, #4
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	440b      	add	r3, r1
 800277e:	761a      	strb	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	bf28      	it	cs
 80027b2:	2304      	movcs	r3, #4
 80027b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d902      	bls.n	80027c4 <NVIC_EncodePriority+0x30>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b03      	subs	r3, #3
 80027c2:	e000      	b.n	80027c6 <NVIC_EncodePriority+0x32>
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	401a      	ands	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43d9      	mvns	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	4313      	orrs	r3, r2
         );
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	@ 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002808:	d301      	bcc.n	800280e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280a:	2301      	movs	r3, #1
 800280c:	e00f      	b.n	800282e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280e:	4a0a      	ldr	r2, [pc, #40]	@ (8002838 <SysTick_Config+0x40>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002816:	210f      	movs	r1, #15
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f7ff ff90 	bl	8002740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <SysTick_Config+0x40>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002826:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <SysTick_Config+0x40>)
 8002828:	2207      	movs	r2, #7
 800282a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff2d 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002864:	f7ff ff42 	bl	80026ec <__NVIC_GetPriorityGrouping>
 8002868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f7ff ff90 	bl	8002794 <NVIC_EncodePriority>
 8002874:	4602      	mov	r2, r0
 8002876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff5f 	bl	8002740 <__NVIC_SetPriority>
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff35 	bl	8002708 <__NVIC_EnableIRQ>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffa2 	bl	80027f8 <SysTick_Config>
 80028b4:	4603      	mov	r3, r0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e043      	b.n	800295e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	4b22      	ldr	r3, [pc, #136]	@ (8002968 <HAL_DMA_Init+0xa8>)
 80028de:	4413      	add	r3, r2
 80028e0:	4a22      	ldr	r2, [pc, #136]	@ (800296c <HAL_DMA_Init+0xac>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	009a      	lsls	r2, r3, #2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002970 <HAL_DMA_Init+0xb0>)
 80028f2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800290a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800290e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	bffdfff8 	.word	0xbffdfff8
 800296c:	cccccccd 	.word	0xcccccccd
 8002970:	40020000 	.word	0x40020000

08002974 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_DMA_Start_IT+0x20>
 8002990:	2302      	movs	r3, #2
 8002992:	e04b      	b.n	8002a2c <HAL_DMA_Start_IT+0xb8>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d13a      	bne.n	8002a1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f9eb 	bl	8002da8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 020e 	orr.w	r2, r2, #14
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e00f      	b.n	8002a0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0204 	bic.w	r2, r2, #4
 80029fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 020a 	orr.w	r2, r2, #10
 8002a0a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e005      	b.n	8002a2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
 8002a28:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e020      	b.n	8002aa0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 020e 	bic.w	r2, r2, #14
 8002a6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a86:	2101      	movs	r1, #1
 8002a88:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d005      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e051      	b.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020e 	bic.w	r2, r2, #14
 8002ade:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a22      	ldr	r2, [pc, #136]	@ (8002b80 <HAL_DMA_Abort_IT+0xd4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d029      	beq.n	8002b4e <HAL_DMA_Abort_IT+0xa2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a21      	ldr	r2, [pc, #132]	@ (8002b84 <HAL_DMA_Abort_IT+0xd8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d022      	beq.n	8002b4a <HAL_DMA_Abort_IT+0x9e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1f      	ldr	r2, [pc, #124]	@ (8002b88 <HAL_DMA_Abort_IT+0xdc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d01a      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x98>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1e      	ldr	r2, [pc, #120]	@ (8002b8c <HAL_DMA_Abort_IT+0xe0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d012      	beq.n	8002b3e <HAL_DMA_Abort_IT+0x92>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b90 <HAL_DMA_Abort_IT+0xe4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00a      	beq.n	8002b38 <HAL_DMA_Abort_IT+0x8c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1b      	ldr	r2, [pc, #108]	@ (8002b94 <HAL_DMA_Abort_IT+0xe8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d102      	bne.n	8002b32 <HAL_DMA_Abort_IT+0x86>
 8002b2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b30:	e00e      	b.n	8002b50 <HAL_DMA_Abort_IT+0xa4>
 8002b32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b36:	e00b      	b.n	8002b50 <HAL_DMA_Abort_IT+0xa4>
 8002b38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b3c:	e008      	b.n	8002b50 <HAL_DMA_Abort_IT+0xa4>
 8002b3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b42:	e005      	b.n	8002b50 <HAL_DMA_Abort_IT+0xa4>
 8002b44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b48:	e002      	b.n	8002b50 <HAL_DMA_Abort_IT+0xa4>
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	e000      	b.n	8002b50 <HAL_DMA_Abort_IT+0xa4>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	4a11      	ldr	r2, [pc, #68]	@ (8002b98 <HAL_DMA_Abort_IT+0xec>)
 8002b52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
    } 
  }
  return status;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40020008 	.word	0x40020008
 8002b84:	4002001c 	.word	0x4002001c
 8002b88:	40020030 	.word	0x40020030
 8002b8c:	40020044 	.word	0x40020044
 8002b90:	40020058 	.word	0x40020058
 8002b94:	4002006c 	.word	0x4002006c
 8002b98:	40020000 	.word	0x40020000

08002b9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	2204      	movs	r2, #4
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d04f      	beq.n	8002c64 <HAL_DMA_IRQHandler+0xc8>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d04a      	beq.n	8002c64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0204 	bic.w	r2, r2, #4
 8002bea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a66      	ldr	r2, [pc, #408]	@ (8002d8c <HAL_DMA_IRQHandler+0x1f0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d029      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xae>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a65      	ldr	r2, [pc, #404]	@ (8002d90 <HAL_DMA_IRQHandler+0x1f4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xaa>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a63      	ldr	r2, [pc, #396]	@ (8002d94 <HAL_DMA_IRQHandler+0x1f8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01a      	beq.n	8002c40 <HAL_DMA_IRQHandler+0xa4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a62      	ldr	r2, [pc, #392]	@ (8002d98 <HAL_DMA_IRQHandler+0x1fc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d012      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x9e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a60      	ldr	r2, [pc, #384]	@ (8002d9c <HAL_DMA_IRQHandler+0x200>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00a      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x98>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5f      	ldr	r2, [pc, #380]	@ (8002da0 <HAL_DMA_IRQHandler+0x204>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d102      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x92>
 8002c28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c2c:	e00e      	b.n	8002c4c <HAL_DMA_IRQHandler+0xb0>
 8002c2e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c32:	e00b      	b.n	8002c4c <HAL_DMA_IRQHandler+0xb0>
 8002c34:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002c38:	e008      	b.n	8002c4c <HAL_DMA_IRQHandler+0xb0>
 8002c3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c3e:	e005      	b.n	8002c4c <HAL_DMA_IRQHandler+0xb0>
 8002c40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c44:	e002      	b.n	8002c4c <HAL_DMA_IRQHandler+0xb0>
 8002c46:	2340      	movs	r3, #64	@ 0x40
 8002c48:	e000      	b.n	8002c4c <HAL_DMA_IRQHandler+0xb0>
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	4a55      	ldr	r2, [pc, #340]	@ (8002da4 <HAL_DMA_IRQHandler+0x208>)
 8002c4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8094 	beq.w	8002d82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c62:	e08e      	b.n	8002d82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	2202      	movs	r2, #2
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d056      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x186>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d051      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 020a 	bic.w	r2, r2, #10
 8002c9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a38      	ldr	r2, [pc, #224]	@ (8002d8c <HAL_DMA_IRQHandler+0x1f0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d029      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x166>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a37      	ldr	r2, [pc, #220]	@ (8002d90 <HAL_DMA_IRQHandler+0x1f4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d022      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x162>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a35      	ldr	r2, [pc, #212]	@ (8002d94 <HAL_DMA_IRQHandler+0x1f8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x15c>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a34      	ldr	r2, [pc, #208]	@ (8002d98 <HAL_DMA_IRQHandler+0x1fc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d012      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x156>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a32      	ldr	r2, [pc, #200]	@ (8002d9c <HAL_DMA_IRQHandler+0x200>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00a      	beq.n	8002cec <HAL_DMA_IRQHandler+0x150>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a31      	ldr	r2, [pc, #196]	@ (8002da0 <HAL_DMA_IRQHandler+0x204>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d102      	bne.n	8002ce6 <HAL_DMA_IRQHandler+0x14a>
 8002ce0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ce4:	e00e      	b.n	8002d04 <HAL_DMA_IRQHandler+0x168>
 8002ce6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cea:	e00b      	b.n	8002d04 <HAL_DMA_IRQHandler+0x168>
 8002cec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cf0:	e008      	b.n	8002d04 <HAL_DMA_IRQHandler+0x168>
 8002cf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cf6:	e005      	b.n	8002d04 <HAL_DMA_IRQHandler+0x168>
 8002cf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cfc:	e002      	b.n	8002d04 <HAL_DMA_IRQHandler+0x168>
 8002cfe:	2320      	movs	r3, #32
 8002d00:	e000      	b.n	8002d04 <HAL_DMA_IRQHandler+0x168>
 8002d02:	2302      	movs	r3, #2
 8002d04:	4a27      	ldr	r2, [pc, #156]	@ (8002da4 <HAL_DMA_IRQHandler+0x208>)
 8002d06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d034      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d20:	e02f      	b.n	8002d82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	2208      	movs	r2, #8
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d028      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x1e8>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d023      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 020e 	bic.w	r2, r2, #14
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
    }
  }
  return;
 8002d82:	bf00      	nop
 8002d84:	bf00      	nop
}
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40020008 	.word	0x40020008
 8002d90:	4002001c 	.word	0x4002001c
 8002d94:	40020030 	.word	0x40020030
 8002d98:	40020044 	.word	0x40020044
 8002d9c:	40020058 	.word	0x40020058
 8002da0:	4002006c 	.word	0x4002006c
 8002da4:	40020000 	.word	0x40020000

08002da8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d108      	bne.n	8002de8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002de6:	e007      	b.n	8002df8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	60da      	str	r2, [r3, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b08b      	sub	sp, #44	@ 0x2c
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e16:	e169      	b.n	80030ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e18:	2201      	movs	r2, #1
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	f040 8158 	bne.w	80030e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a9a      	ldr	r2, [pc, #616]	@ (80030a4 <HAL_GPIO_Init+0x2a0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d05e      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e40:	4a98      	ldr	r2, [pc, #608]	@ (80030a4 <HAL_GPIO_Init+0x2a0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d875      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e46:	4a98      	ldr	r2, [pc, #608]	@ (80030a8 <HAL_GPIO_Init+0x2a4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d058      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e4c:	4a96      	ldr	r2, [pc, #600]	@ (80030a8 <HAL_GPIO_Init+0x2a4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d86f      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e52:	4a96      	ldr	r2, [pc, #600]	@ (80030ac <HAL_GPIO_Init+0x2a8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d052      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e58:	4a94      	ldr	r2, [pc, #592]	@ (80030ac <HAL_GPIO_Init+0x2a8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d869      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e5e:	4a94      	ldr	r2, [pc, #592]	@ (80030b0 <HAL_GPIO_Init+0x2ac>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d04c      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e64:	4a92      	ldr	r2, [pc, #584]	@ (80030b0 <HAL_GPIO_Init+0x2ac>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d863      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e6a:	4a92      	ldr	r2, [pc, #584]	@ (80030b4 <HAL_GPIO_Init+0x2b0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d046      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e70:	4a90      	ldr	r2, [pc, #576]	@ (80030b4 <HAL_GPIO_Init+0x2b0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d85d      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e76:	2b12      	cmp	r3, #18
 8002e78:	d82a      	bhi.n	8002ed0 <HAL_GPIO_Init+0xcc>
 8002e7a:	2b12      	cmp	r3, #18
 8002e7c:	d859      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e84 <HAL_GPIO_Init+0x80>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002eff 	.word	0x08002eff
 8002e88:	08002ed9 	.word	0x08002ed9
 8002e8c:	08002eeb 	.word	0x08002eeb
 8002e90:	08002f2d 	.word	0x08002f2d
 8002e94:	08002f33 	.word	0x08002f33
 8002e98:	08002f33 	.word	0x08002f33
 8002e9c:	08002f33 	.word	0x08002f33
 8002ea0:	08002f33 	.word	0x08002f33
 8002ea4:	08002f33 	.word	0x08002f33
 8002ea8:	08002f33 	.word	0x08002f33
 8002eac:	08002f33 	.word	0x08002f33
 8002eb0:	08002f33 	.word	0x08002f33
 8002eb4:	08002f33 	.word	0x08002f33
 8002eb8:	08002f33 	.word	0x08002f33
 8002ebc:	08002f33 	.word	0x08002f33
 8002ec0:	08002f33 	.word	0x08002f33
 8002ec4:	08002f33 	.word	0x08002f33
 8002ec8:	08002ee1 	.word	0x08002ee1
 8002ecc:	08002ef5 	.word	0x08002ef5
 8002ed0:	4a79      	ldr	r2, [pc, #484]	@ (80030b8 <HAL_GPIO_Init+0x2b4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ed6:	e02c      	b.n	8002f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	623b      	str	r3, [r7, #32]
          break;
 8002ede:	e029      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	623b      	str	r3, [r7, #32]
          break;
 8002ee8:	e024      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	3308      	adds	r3, #8
 8002ef0:	623b      	str	r3, [r7, #32]
          break;
 8002ef2:	e01f      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	623b      	str	r3, [r7, #32]
          break;
 8002efc:	e01a      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f06:	2304      	movs	r3, #4
 8002f08:	623b      	str	r3, [r7, #32]
          break;
 8002f0a:	e013      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d105      	bne.n	8002f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f14:	2308      	movs	r3, #8
 8002f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	611a      	str	r2, [r3, #16]
          break;
 8002f1e:	e009      	b.n	8002f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f20:	2308      	movs	r3, #8
 8002f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	615a      	str	r2, [r3, #20]
          break;
 8002f2a:	e003      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	623b      	str	r3, [r7, #32]
          break;
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          break;
 8002f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2bff      	cmp	r3, #255	@ 0xff
 8002f38:	d801      	bhi.n	8002f3e <HAL_GPIO_Init+0x13a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	e001      	b.n	8002f42 <HAL_GPIO_Init+0x13e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2bff      	cmp	r3, #255	@ 0xff
 8002f48:	d802      	bhi.n	8002f50 <HAL_GPIO_Init+0x14c>
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	e002      	b.n	8002f56 <HAL_GPIO_Init+0x152>
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	3b08      	subs	r3, #8
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	210f      	movs	r1, #15
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	6a39      	ldr	r1, [r7, #32]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	431a      	orrs	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80b1 	beq.w	80030e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f84:	4b4d      	ldr	r3, [pc, #308]	@ (80030bc <HAL_GPIO_Init+0x2b8>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4a4c      	ldr	r2, [pc, #304]	@ (80030bc <HAL_GPIO_Init+0x2b8>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6193      	str	r3, [r2, #24]
 8002f90:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_GPIO_Init+0x2b8>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f9c:	4a48      	ldr	r2, [pc, #288]	@ (80030c0 <HAL_GPIO_Init+0x2bc>)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	220f      	movs	r2, #15
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a40      	ldr	r2, [pc, #256]	@ (80030c4 <HAL_GPIO_Init+0x2c0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <HAL_GPIO_Init+0x1ec>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a3f      	ldr	r2, [pc, #252]	@ (80030c8 <HAL_GPIO_Init+0x2c4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00d      	beq.n	8002fec <HAL_GPIO_Init+0x1e8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80030cc <HAL_GPIO_Init+0x2c8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <HAL_GPIO_Init+0x1e4>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a3d      	ldr	r2, [pc, #244]	@ (80030d0 <HAL_GPIO_Init+0x2cc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_GPIO_Init+0x1e0>
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e006      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e004      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e002      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff4:	f002 0203 	and.w	r2, r2, #3
 8002ff8:	0092      	lsls	r2, r2, #2
 8002ffa:	4093      	lsls	r3, r2
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003002:	492f      	ldr	r1, [pc, #188]	@ (80030c0 <HAL_GPIO_Init+0x2bc>)
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	3302      	adds	r3, #2
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800301c:	4b2d      	ldr	r3, [pc, #180]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	492c      	ldr	r1, [pc, #176]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	608b      	str	r3, [r1, #8]
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800302a:	4b2a      	ldr	r3, [pc, #168]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	43db      	mvns	r3, r3
 8003032:	4928      	ldr	r1, [pc, #160]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003034:	4013      	ands	r3, r2
 8003036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003044:	4b23      	ldr	r3, [pc, #140]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	4922      	ldr	r1, [pc, #136]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	60cb      	str	r3, [r1, #12]
 8003050:	e006      	b.n	8003060 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003052:	4b20      	ldr	r3, [pc, #128]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	43db      	mvns	r3, r3
 800305a:	491e      	ldr	r1, [pc, #120]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800305c:	4013      	ands	r3, r2
 800305e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800306c:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4918      	ldr	r1, [pc, #96]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
 8003078:	e006      	b.n	8003088 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800307a:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	43db      	mvns	r3, r3
 8003082:	4914      	ldr	r1, [pc, #80]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003084:	4013      	ands	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d021      	beq.n	80030d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003094:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	490e      	ldr	r1, [pc, #56]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e021      	b.n	80030e6 <HAL_GPIO_Init+0x2e2>
 80030a2:	bf00      	nop
 80030a4:	10320000 	.word	0x10320000
 80030a8:	10310000 	.word	0x10310000
 80030ac:	10220000 	.word	0x10220000
 80030b0:	10210000 	.word	0x10210000
 80030b4:	10120000 	.word	0x10120000
 80030b8:	10110000 	.word	0x10110000
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010800 	.word	0x40010800
 80030c8:	40010c00 	.word	0x40010c00
 80030cc:	40011000 	.word	0x40011000
 80030d0:	40011400 	.word	0x40011400
 80030d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_GPIO_Init+0x304>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	43db      	mvns	r3, r3
 80030e0:	4909      	ldr	r1, [pc, #36]	@ (8003108 <HAL_GPIO_Init+0x304>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	3301      	adds	r3, #1
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f47f ae8e 	bne.w	8002e18 <HAL_GPIO_Init+0x14>
  }
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	372c      	adds	r7, #44	@ 0x2c
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	40010400 	.word	0x40010400

0800310c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
 8003118:	4613      	mov	r3, r2
 800311a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800311c:	787b      	ldrb	r3, [r7, #1]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003122:	887a      	ldrh	r2, [r7, #2]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003128:	e003      	b.n	8003132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800312a:	887b      	ldrh	r3, [r7, #2]
 800312c:	041a      	lsls	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003146:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003152:	4a05      	ldr	r2, [pc, #20]	@ (8003168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f806 	bl	800316c <HAL_GPIO_EXTI_Callback>
  }
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40010400 	.word	0x40010400

0800316c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e272      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8087 	beq.w	80032ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a0:	4b92      	ldr	r3, [pc, #584]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d00c      	beq.n	80031c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031ac:	4b8f      	ldr	r3, [pc, #572]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d112      	bne.n	80031de <HAL_RCC_OscConfig+0x5e>
 80031b8:	4b8c      	ldr	r3, [pc, #560]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c4:	d10b      	bne.n	80031de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c6:	4b89      	ldr	r3, [pc, #548]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d06c      	beq.n	80032ac <HAL_RCC_OscConfig+0x12c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d168      	bne.n	80032ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e24c      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e6:	d106      	bne.n	80031f6 <HAL_RCC_OscConfig+0x76>
 80031e8:	4b80      	ldr	r3, [pc, #512]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a7f      	ldr	r2, [pc, #508]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80031ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	e02e      	b.n	8003254 <HAL_RCC_OscConfig+0xd4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x98>
 80031fe:	4b7b      	ldr	r3, [pc, #492]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a7a      	ldr	r2, [pc, #488]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	4b78      	ldr	r3, [pc, #480]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a77      	ldr	r2, [pc, #476]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003210:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e01d      	b.n	8003254 <HAL_RCC_OscConfig+0xd4>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003220:	d10c      	bne.n	800323c <HAL_RCC_OscConfig+0xbc>
 8003222:	4b72      	ldr	r3, [pc, #456]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a71      	ldr	r2, [pc, #452]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b6f      	ldr	r3, [pc, #444]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a6e      	ldr	r2, [pc, #440]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e00b      	b.n	8003254 <HAL_RCC_OscConfig+0xd4>
 800323c:	4b6b      	ldr	r3, [pc, #428]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a6a      	ldr	r2, [pc, #424]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b68      	ldr	r3, [pc, #416]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a67      	ldr	r2, [pc, #412]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 800324e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003252:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fe fcac 	bl	8001bb8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003264:	f7fe fca8 	bl	8001bb8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	@ 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e200      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	4b5d      	ldr	r3, [pc, #372]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0xe4>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe fc98 	bl	8001bb8 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800328c:	f7fe fc94 	bl	8001bb8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	@ 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e1ec      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329e:	4b53      	ldr	r3, [pc, #332]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x10c>
 80032aa:	e000      	b.n	80032ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d063      	beq.n	8003382 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ba:	4b4c      	ldr	r3, [pc, #304]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032c6:	4b49      	ldr	r3, [pc, #292]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d11c      	bne.n	800330c <HAL_RCC_OscConfig+0x18c>
 80032d2:	4b46      	ldr	r3, [pc, #280]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d116      	bne.n	800330c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	4b43      	ldr	r3, [pc, #268]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_RCC_OscConfig+0x176>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d001      	beq.n	80032f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e1c0      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f6:	4b3d      	ldr	r3, [pc, #244]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4939      	ldr	r1, [pc, #228]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	e03a      	b.n	8003382 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d020      	beq.n	8003356 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003314:	4b36      	ldr	r3, [pc, #216]	@ (80033f0 <HAL_RCC_OscConfig+0x270>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331a:	f7fe fc4d 	bl	8001bb8 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003322:	f7fe fc49 	bl	8001bb8 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e1a1      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003334:	4b2d      	ldr	r3, [pc, #180]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003340:	4b2a      	ldr	r3, [pc, #168]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4927      	ldr	r1, [pc, #156]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
 8003354:	e015      	b.n	8003382 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003356:	4b26      	ldr	r3, [pc, #152]	@ (80033f0 <HAL_RCC_OscConfig+0x270>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7fe fc2c 	bl	8001bb8 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003364:	f7fe fc28 	bl	8001bb8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e180      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003376:	4b1d      	ldr	r3, [pc, #116]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d03a      	beq.n	8003404 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d019      	beq.n	80033ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003396:	4b17      	ldr	r3, [pc, #92]	@ (80033f4 <HAL_RCC_OscConfig+0x274>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339c:	f7fe fc0c 	bl	8001bb8 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a4:	f7fe fc08 	bl	8001bb8 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e160      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b6:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <HAL_RCC_OscConfig+0x26c>)
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033c2:	2001      	movs	r0, #1
 80033c4:	f000 face 	bl	8003964 <RCC_Delay>
 80033c8:	e01c      	b.n	8003404 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ca:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <HAL_RCC_OscConfig+0x274>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d0:	f7fe fbf2 	bl	8001bb8 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d6:	e00f      	b.n	80033f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d8:	f7fe fbee 	bl	8001bb8 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d908      	bls.n	80033f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e146      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	42420000 	.word	0x42420000
 80033f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	4b92      	ldr	r3, [pc, #584]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e9      	bne.n	80033d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80a6 	beq.w	800355e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003412:	2300      	movs	r3, #0
 8003414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003416:	4b8b      	ldr	r3, [pc, #556]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10d      	bne.n	800343e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	4b88      	ldr	r3, [pc, #544]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	4a87      	ldr	r2, [pc, #540]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342c:	61d3      	str	r3, [r2, #28]
 800342e:	4b85      	ldr	r3, [pc, #532]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343a:	2301      	movs	r3, #1
 800343c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343e:	4b82      	ldr	r3, [pc, #520]	@ (8003648 <HAL_RCC_OscConfig+0x4c8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d118      	bne.n	800347c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344a:	4b7f      	ldr	r3, [pc, #508]	@ (8003648 <HAL_RCC_OscConfig+0x4c8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a7e      	ldr	r2, [pc, #504]	@ (8003648 <HAL_RCC_OscConfig+0x4c8>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003456:	f7fe fbaf 	bl	8001bb8 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345e:	f7fe fbab 	bl	8001bb8 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	@ 0x64
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e103      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	4b75      	ldr	r3, [pc, #468]	@ (8003648 <HAL_RCC_OscConfig+0x4c8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d106      	bne.n	8003492 <HAL_RCC_OscConfig+0x312>
 8003484:	4b6f      	ldr	r3, [pc, #444]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4a6e      	ldr	r2, [pc, #440]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6213      	str	r3, [r2, #32]
 8003490:	e02d      	b.n	80034ee <HAL_RCC_OscConfig+0x36e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x334>
 800349a:	4b6a      	ldr	r3, [pc, #424]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4a69      	ldr	r2, [pc, #420]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6213      	str	r3, [r2, #32]
 80034a6:	4b67      	ldr	r3, [pc, #412]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	4a66      	ldr	r2, [pc, #408]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	f023 0304 	bic.w	r3, r3, #4
 80034b0:	6213      	str	r3, [r2, #32]
 80034b2:	e01c      	b.n	80034ee <HAL_RCC_OscConfig+0x36e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	d10c      	bne.n	80034d6 <HAL_RCC_OscConfig+0x356>
 80034bc:	4b61      	ldr	r3, [pc, #388]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	4a60      	ldr	r2, [pc, #384]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	f043 0304 	orr.w	r3, r3, #4
 80034c6:	6213      	str	r3, [r2, #32]
 80034c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6213      	str	r3, [r2, #32]
 80034d4:	e00b      	b.n	80034ee <HAL_RCC_OscConfig+0x36e>
 80034d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4a5a      	ldr	r2, [pc, #360]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6213      	str	r3, [r2, #32]
 80034e2:	4b58      	ldr	r3, [pc, #352]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4a57      	ldr	r2, [pc, #348]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d015      	beq.n	8003522 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f6:	f7fe fb5f 	bl	8001bb8 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fe fb5b 	bl	8001bb8 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0b1      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003514:	4b4b      	ldr	r3, [pc, #300]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ee      	beq.n	80034fe <HAL_RCC_OscConfig+0x37e>
 8003520:	e014      	b.n	800354c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003522:	f7fe fb49 	bl	8001bb8 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fe fb45 	bl	8001bb8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e09b      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003540:	4b40      	ldr	r3, [pc, #256]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ee      	bne.n	800352a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003552:	4b3c      	ldr	r3, [pc, #240]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	4a3b      	ldr	r2, [pc, #236]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800355c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8087 	beq.w	8003676 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003568:	4b36      	ldr	r3, [pc, #216]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b08      	cmp	r3, #8
 8003572:	d061      	beq.n	8003638 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d146      	bne.n	800360a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357c:	4b33      	ldr	r3, [pc, #204]	@ (800364c <HAL_RCC_OscConfig+0x4cc>)
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fe fb19 	bl	8001bb8 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358a:	f7fe fb15 	bl	8001bb8 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e06d      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359c:	4b29      	ldr	r3, [pc, #164]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f0      	bne.n	800358a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b0:	d108      	bne.n	80035c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035b2:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	4921      	ldr	r1, [pc, #132]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a19      	ldr	r1, [r3, #32]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	430b      	orrs	r3, r1
 80035d6:	491b      	ldr	r1, [pc, #108]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035dc:	4b1b      	ldr	r3, [pc, #108]	@ (800364c <HAL_RCC_OscConfig+0x4cc>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e2:	f7fe fae9 	bl	8001bb8 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fe fae5 	bl	8001bb8 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e03d      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035fc:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x46a>
 8003608:	e035      	b.n	8003676 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b10      	ldr	r3, [pc, #64]	@ (800364c <HAL_RCC_OscConfig+0x4cc>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe fad2 	bl	8001bb8 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe face 	bl	8001bb8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e026      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <HAL_RCC_OscConfig+0x4c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x498>
 8003636:	e01e      	b.n	8003676 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d107      	bne.n	8003650 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e019      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
 8003644:	40021000 	.word	0x40021000
 8003648:	40007000 	.word	0x40007000
 800364c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_RCC_OscConfig+0x500>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	429a      	cmp	r2, r3
 8003662:	d106      	bne.n	8003672 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d001      	beq.n	8003676 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000

08003684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0d0      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003698:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d910      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b67      	ldr	r3, [pc, #412]	@ (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 0207 	bic.w	r2, r3, #7
 80036ae:	4965      	ldr	r1, [pc, #404]	@ (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b63      	ldr	r3, [pc, #396]	@ (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0b8      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e0:	4b59      	ldr	r3, [pc, #356]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a58      	ldr	r2, [pc, #352]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f8:	4b53      	ldr	r3, [pc, #332]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a52      	ldr	r2, [pc, #328]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003702:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b50      	ldr	r3, [pc, #320]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	494d      	ldr	r1, [pc, #308]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d040      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	4b47      	ldr	r3, [pc, #284]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d115      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07f      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003742:	4b41      	ldr	r3, [pc, #260]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e073      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003752:	4b3d      	ldr	r3, [pc, #244]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e06b      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003762:	4b39      	ldr	r3, [pc, #228]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4936      	ldr	r1, [pc, #216]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003774:	f7fe fa20 	bl	8001bb8 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fe fa1c 	bl	8001bb8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e053      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	4b2d      	ldr	r3, [pc, #180]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1eb      	bne.n	800377c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a4:	4b27      	ldr	r3, [pc, #156]	@ (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d210      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b24      	ldr	r3, [pc, #144]	@ (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 0207 	bic.w	r2, r3, #7
 80037ba:	4922      	ldr	r1, [pc, #136]	@ (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b20      	ldr	r3, [pc, #128]	@ (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e032      	b.n	800383a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e0:	4b19      	ldr	r3, [pc, #100]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4916      	ldr	r1, [pc, #88]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037fe:	4b12      	ldr	r3, [pc, #72]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	490e      	ldr	r1, [pc, #56]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003812:	f000 f821 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8003816:	4602      	mov	r2, r0
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	490a      	ldr	r1, [pc, #40]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	5ccb      	ldrb	r3, [r1, r3]
 8003826:	fa22 f303 	lsr.w	r3, r2, r3
 800382a:	4a09      	ldr	r2, [pc, #36]	@ (8003850 <HAL_RCC_ClockConfig+0x1cc>)
 800382c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800382e:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <HAL_RCC_ClockConfig+0x1d0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe f97e 	bl	8001b34 <HAL_InitTick>

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40022000 	.word	0x40022000
 8003848:	40021000 	.word	0x40021000
 800384c:	08004c4c 	.word	0x08004c4c
 8003850:	20000000 	.word	0x20000000
 8003854:	20000004 	.word	0x20000004

08003858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003872:	4b1e      	ldr	r3, [pc, #120]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b04      	cmp	r3, #4
 8003880:	d002      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x30>
 8003882:	2b08      	cmp	r3, #8
 8003884:	d003      	beq.n	800388e <HAL_RCC_GetSysClockFreq+0x36>
 8003886:	e027      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003888:	4b19      	ldr	r3, [pc, #100]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800388a:	613b      	str	r3, [r7, #16]
      break;
 800388c:	e027      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	0c9b      	lsrs	r3, r3, #18
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	4a17      	ldr	r2, [pc, #92]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003898:	5cd3      	ldrb	r3, [r2, r3]
 800389a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d010      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038a6:	4b11      	ldr	r3, [pc, #68]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x94>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	0c5b      	lsrs	r3, r3, #17
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	4a11      	ldr	r2, [pc, #68]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038b2:	5cd3      	ldrb	r3, [r2, r3]
 80038b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a0d      	ldr	r2, [pc, #52]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ba:	fb03 f202 	mul.w	r2, r3, r2
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	e004      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a0c      	ldr	r2, [pc, #48]	@ (80038fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
 80038d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	613b      	str	r3, [r7, #16]
      break;
 80038d6:	e002      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038d8:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80038da:	613b      	str	r3, [r7, #16]
      break;
 80038dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038de:	693b      	ldr	r3, [r7, #16]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	007a1200 	.word	0x007a1200
 80038f4:	08004c64 	.word	0x08004c64
 80038f8:	08004c74 	.word	0x08004c74
 80038fc:	003d0900 	.word	0x003d0900

08003900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003904:	4b02      	ldr	r3, [pc, #8]	@ (8003910 <HAL_RCC_GetHCLKFreq+0x10>)
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	20000000 	.word	0x20000000

08003914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003918:	f7ff fff2 	bl	8003900 <HAL_RCC_GetHCLKFreq>
 800391c:	4602      	mov	r2, r0
 800391e:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	4903      	ldr	r1, [pc, #12]	@ (8003938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800392a:	5ccb      	ldrb	r3, [r1, r3]
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	08004c5c 	.word	0x08004c5c

0800393c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003940:	f7ff ffde 	bl	8003900 <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	0adb      	lsrs	r3, r3, #11
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4903      	ldr	r1, [pc, #12]	@ (8003960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	08004c5c 	.word	0x08004c5c

08003964 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800396c:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <RCC_Delay+0x34>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0a      	ldr	r2, [pc, #40]	@ (800399c <RCC_Delay+0x38>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0a5b      	lsrs	r3, r3, #9
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003980:	bf00      	nop
  }
  while (Delay --);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1e5a      	subs	r2, r3, #1
 8003986:	60fa      	str	r2, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f9      	bne.n	8003980 <RCC_Delay+0x1c>
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	20000000 	.word	0x20000000
 800399c:	10624dd3 	.word	0x10624dd3

080039a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d07d      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039bc:	2300      	movs	r3, #0
 80039be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10d      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	61d3      	str	r3, [r2, #28]
 80039d8:	4b49      	ldr	r3, [pc, #292]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e4:	2301      	movs	r3, #1
 80039e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	4b46      	ldr	r3, [pc, #280]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d118      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f4:	4b43      	ldr	r3, [pc, #268]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a42      	ldr	r2, [pc, #264]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a00:	f7fe f8da 	bl	8001bb8 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	e008      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a08:	f7fe f8d6 	bl	8001bb8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	@ 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e06d      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a26:	4b36      	ldr	r3, [pc, #216]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02e      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d027      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a44:	4b2e      	ldr	r3, [pc, #184]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a54:	4b2c      	ldr	r3, [pc, #176]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a5a:	4a29      	ldr	r2, [pc, #164]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d014      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fe f8a5 	bl	8001bb8 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fe f8a1 	bl	8001bb8 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e036      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	4b1d      	ldr	r3, [pc, #116]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0ee      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a94:	4b1a      	ldr	r3, [pc, #104]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4917      	ldr	r1, [pc, #92]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aac:	4b14      	ldr	r3, [pc, #80]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	4a13      	ldr	r2, [pc, #76]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	490b      	ldr	r1, [pc, #44]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae2:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	4904      	ldr	r1, [pc, #16]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40007000 	.word	0x40007000
 8003b08:	42420440 	.word	0x42420440

08003b0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e042      	b.n	8003ba4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd febc 	bl	80018b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2224      	movs	r2, #36	@ 0x24
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fdc3 	bl	80046dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	@ 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d156      	bne.n	8003c74 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_UART_Transmit_DMA+0x26>
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e04f      	b.n	8003c76 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	88fa      	ldrh	r2, [r7, #6]
 8003be6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2221      	movs	r2, #33	@ 0x21
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfa:	4a21      	ldr	r2, [pc, #132]	@ (8003c80 <HAL_UART_Transmit_DMA+0xd4>)
 8003bfc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c02:	4a20      	ldr	r2, [pc, #128]	@ (8003c84 <HAL_UART_Transmit_DMA+0xd8>)
 8003c04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c88 <HAL_UART_Transmit_DMA+0xdc>)
 8003c0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c12:	2200      	movs	r2, #0
 8003c14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003c16:	f107 0308 	add.w	r3, r7, #8
 8003c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	f7fe fea1 	bl	8002974 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3314      	adds	r3, #20
 8003c42:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3314      	adds	r3, #20
 8003c5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c5e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6a39      	ldr	r1, [r7, #32]
 8003c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e5      	bne.n	8003c3c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3730      	adds	r7, #48	@ 0x30
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	0800420f 	.word	0x0800420f
 8003c84:	080042a9 	.word	0x080042a9
 8003c88:	080042c5 	.word	0x080042c5

08003c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b0ba      	sub	sp, #232	@ 0xe8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10f      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x66>
 8003cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fc38 	bl	8004560 <UART_Receive_IT>
      return;
 8003cf0:	e25b      	b.n	80041aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80de 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x22c>
 8003cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80d1 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <HAL_UART_IRQHandler+0xae>
 8003d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <HAL_UART_IRQHandler+0xd2>
 8003d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d56:	f043 0202 	orr.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <HAL_UART_IRQHandler+0xf6>
 8003d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	f043 0204 	orr.w	r2, r3, #4
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d011      	beq.n	8003db2 <HAL_UART_IRQHandler+0x126>
 8003d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d105      	bne.n	8003da6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003daa:	f043 0208 	orr.w	r2, r3, #8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 81f2 	beq.w	80041a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_UART_IRQHandler+0x14e>
 8003dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fbc3 	bl	8004560 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <HAL_UART_IRQHandler+0x17a>
 8003dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d04f      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 facd 	bl	80043a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d041      	beq.n	8003e9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3314      	adds	r3, #20
 8003e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3314      	adds	r3, #20
 8003e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1d9      	bne.n	8003e1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d013      	beq.n	8003e96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e72:	4a7e      	ldr	r2, [pc, #504]	@ (800406c <HAL_UART_IRQHandler+0x3e0>)
 8003e74:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fe16 	bl	8002aac <HAL_DMA_Abort_IT>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e90:	4610      	mov	r0, r2
 8003e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	e00e      	b.n	8003eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9a5 	bl	80041e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	e00a      	b.n	8003eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9a1 	bl	80041e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	e006      	b.n	8003eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f99d 	bl	80041e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003eb2:	e175      	b.n	80041a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	bf00      	nop
    return;
 8003eb6:	e173      	b.n	80041a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	f040 814f 	bne.w	8004160 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8148 	beq.w	8004160 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8141 	beq.w	8004160 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80b6 	beq.w	8004070 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8145 	beq.w	80041a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f22:	429a      	cmp	r2, r3
 8003f24:	f080 813e 	bcs.w	80041a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	f000 8088 	beq.w	800404c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f68:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f74:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1d9      	bne.n	8003f3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3314      	adds	r3, #20
 8003f8e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3314      	adds	r3, #20
 8003fa8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fac:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e1      	bne.n	8003f88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fe8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e3      	bne.n	8003fc4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800401a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800401c:	f023 0310 	bic.w	r3, r3, #16
 8004020:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800402e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004030:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004034:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800403c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e3      	bne.n	800400a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fcf4 	bl	8002a34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800405a:	b29b      	uxth	r3, r3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	b29b      	uxth	r3, r3
 8004060:	4619      	mov	r1, r3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f8c8 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004068:	e09c      	b.n	80041a4 <HAL_UART_IRQHandler+0x518>
 800406a:	bf00      	nop
 800406c:	0800446b 	.word	0x0800446b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004078:	b29b      	uxth	r3, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 808e 	beq.w	80041a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800408c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8089 	beq.w	80041a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80040bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e3      	bne.n	8004096 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3314      	adds	r3, #20
 80040d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	623b      	str	r3, [r7, #32]
   return(result);
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3314      	adds	r3, #20
 80040ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80040f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e3      	bne.n	80040ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	60fb      	str	r3, [r7, #12]
   return(result);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0310 	bic.w	r3, r3, #16
 800412a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	330c      	adds	r3, #12
 8004134:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004138:	61fa      	str	r2, [r7, #28]
 800413a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	69b9      	ldr	r1, [r7, #24]
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	617b      	str	r3, [r7, #20]
   return(result);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e3      	bne.n	8004114 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004152:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004156:	4619      	mov	r1, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f84d 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800415e:	e023      	b.n	80041a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <HAL_UART_IRQHandler+0x4f4>
 800416c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f98a 	bl	8004492 <UART_Transmit_IT>
    return;
 800417e:	e014      	b.n	80041aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <HAL_UART_IRQHandler+0x51e>
 800418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f9c9 	bl	8004530 <UART_EndTransmit_IT>
    return;
 800419e:	e004      	b.n	80041aa <HAL_UART_IRQHandler+0x51e>
    return;
 80041a0:	bf00      	nop
 80041a2:	e002      	b.n	80041aa <HAL_UART_IRQHandler+0x51e>
      return;
 80041a4:	bf00      	nop
 80041a6:	e000      	b.n	80041aa <HAL_UART_IRQHandler+0x51e>
      return;
 80041a8:	bf00      	nop
  }
}
 80041aa:	37e8      	adds	r7, #232	@ 0xe8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr

080041c2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b090      	sub	sp, #64	@ 0x40
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d137      	bne.n	800429a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800422a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800422c:	2200      	movs	r2, #0
 800422e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	623b      	str	r3, [r7, #32]
   return(result);
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3314      	adds	r3, #20
 800424e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004250:	633a      	str	r2, [r7, #48]	@ 0x30
 8004252:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800425e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e5      	bne.n	8004230 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	60fb      	str	r3, [r7, #12]
   return(result);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800427a:	637b      	str	r3, [r7, #52]	@ 0x34
 800427c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004284:	61fa      	str	r2, [r7, #28]
 8004286:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	69b9      	ldr	r1, [r7, #24]
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	617b      	str	r3, [r7, #20]
   return(result);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004298:	e002      	b.n	80042a0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800429a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800429c:	f7ff ff88 	bl	80041b0 <HAL_UART_TxCpltCallback>
}
 80042a0:	bf00      	nop
 80042a2:	3740      	adds	r7, #64	@ 0x40
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff ff83 	bl	80041c2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b21      	cmp	r3, #33	@ 0x21
 80042f6:	d108      	bne.n	800430a <UART_DMAError+0x46>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004304:	68b8      	ldr	r0, [r7, #8]
 8004306:	f000 f827 	bl	8004358 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf14      	ite	ne
 8004318:	2301      	movne	r3, #1
 800431a:	2300      	moveq	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b22      	cmp	r3, #34	@ 0x22
 800432a:	d108      	bne.n	800433e <UART_DMAError+0x7a>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2200      	movs	r2, #0
 8004336:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004338:	68b8      	ldr	r0, [r7, #8]
 800433a:	f000 f834 	bl	80043a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004342:	f043 0210 	orr.w	r2, r3, #16
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800434a:	68b8      	ldr	r0, [r7, #8]
 800434c:	f7ff ff4b 	bl	80041e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	@ 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	61ba      	str	r2, [r7, #24]
 8004382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6979      	ldr	r1, [r7, #20]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	613b      	str	r3, [r7, #16]
   return(result);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e5      	bne.n	8004360 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800439c:	bf00      	nop
 800439e:	3724      	adds	r7, #36	@ 0x24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b095      	sub	sp, #84	@ 0x54
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80043d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e5      	bne.n	80043ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3314      	adds	r3, #20
 80043e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004402:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004404:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e5      	bne.n	80043e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	2b01      	cmp	r3, #1
 800441c:	d119      	bne.n	8004452 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	60bb      	str	r3, [r7, #8]
   return(result);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f023 0310 	bic.w	r3, r3, #16
 8004434:	647b      	str	r3, [r7, #68]	@ 0x44
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800443e:	61ba      	str	r2, [r7, #24]
 8004440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	6979      	ldr	r1, [r7, #20]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	613b      	str	r3, [r7, #16]
   return(result);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e5      	bne.n	800441e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004460:	bf00      	nop
 8004462:	3754      	adds	r7, #84	@ 0x54
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr

0800446a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f7ff feae 	bl	80041e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b21      	cmp	r3, #33	@ 0x21
 80044a4:	d13e      	bne.n	8004524 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ae:	d114      	bne.n	80044da <UART_Transmit_IT+0x48>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d110      	bne.n	80044da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	1c9a      	adds	r2, r3, #2
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	621a      	str	r2, [r3, #32]
 80044d8:	e008      	b.n	80044ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	1c59      	adds	r1, r3, #1
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6211      	str	r1, [r2, #32]
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4619      	mov	r1, r3
 80044fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10f      	bne.n	8004520 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800450e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800451e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004546:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff fe2d 	bl	80041b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08c      	sub	sp, #48	@ 0x30
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b22      	cmp	r3, #34	@ 0x22
 8004572:	f040 80ae 	bne.w	80046d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457e:	d117      	bne.n	80045b0 <UART_Receive_IT+0x50>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d113      	bne.n	80045b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	b29a      	uxth	r2, r3
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a8:	1c9a      	adds	r2, r3, #2
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80045ae:	e026      	b.n	80045fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c2:	d007      	beq.n	80045d4 <UART_Receive_IT+0x74>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <UART_Receive_IT+0x82>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	e008      	b.n	80045f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29b      	uxth	r3, r3
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4619      	mov	r1, r3
 800460c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800460e:	2b00      	cmp	r3, #0
 8004610:	d15d      	bne.n	80046ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0220 	bic.w	r2, r2, #32
 8004620:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004630:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0201 	bic.w	r2, r2, #1
 8004640:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004654:	2b01      	cmp	r3, #1
 8004656:	d135      	bne.n	80046c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	613b      	str	r3, [r7, #16]
   return(result);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f023 0310 	bic.w	r3, r3, #16
 8004674:	627b      	str	r3, [r7, #36]	@ 0x24
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467e:	623a      	str	r2, [r7, #32]
 8004680:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	69f9      	ldr	r1, [r7, #28]
 8004684:	6a3a      	ldr	r2, [r7, #32]
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	61bb      	str	r3, [r7, #24]
   return(result);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b10      	cmp	r3, #16
 800469e:	d10a      	bne.n	80046b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046ba:	4619      	mov	r1, r3
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff fd9b 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
 80046c2:	e002      	b.n	80046ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fd85 	bl	80041d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e002      	b.n	80046d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e000      	b.n	80046d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
  }
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3730      	adds	r7, #48	@ 0x30
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004716:	f023 030c 	bic.w	r3, r3, #12
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	430b      	orrs	r3, r1
 8004722:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2c      	ldr	r2, [pc, #176]	@ (80047f0 <UART_SetConfig+0x114>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d103      	bne.n	800474c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004744:	f7ff f8fa 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	e002      	b.n	8004752 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800474c:	f7ff f8e2 	bl	8003914 <HAL_RCC_GetPCLK1Freq>
 8004750:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009a      	lsls	r2, r3, #2
 800475c:	441a      	add	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	4a22      	ldr	r2, [pc, #136]	@ (80047f4 <UART_SetConfig+0x118>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	0119      	lsls	r1, r3, #4
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009a      	lsls	r2, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	fbb2 f2f3 	udiv	r2, r2, r3
 8004788:	4b1a      	ldr	r3, [pc, #104]	@ (80047f4 <UART_SetConfig+0x118>)
 800478a:	fba3 0302 	umull	r0, r3, r3, r2
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2064      	movs	r0, #100	@ 0x64
 8004792:	fb00 f303 	mul.w	r3, r0, r3
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	3332      	adds	r3, #50	@ 0x32
 800479c:	4a15      	ldr	r2, [pc, #84]	@ (80047f4 <UART_SetConfig+0x118>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047a8:	4419      	add	r1, r3
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009a      	lsls	r2, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80047c0:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <UART_SetConfig+0x118>)
 80047c2:	fba3 0302 	umull	r0, r3, r3, r2
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	2064      	movs	r0, #100	@ 0x64
 80047ca:	fb00 f303 	mul.w	r3, r0, r3
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	3332      	adds	r3, #50	@ 0x32
 80047d4:	4a07      	ldr	r2, [pc, #28]	@ (80047f4 <UART_SetConfig+0x118>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	f003 020f 	and.w	r2, r3, #15
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	440a      	add	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40013800 	.word	0x40013800
 80047f4:	51eb851f 	.word	0x51eb851f

080047f8 <memset>:
 80047f8:	4603      	mov	r3, r0
 80047fa:	4402      	add	r2, r0
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d100      	bne.n	8004802 <memset+0xa>
 8004800:	4770      	bx	lr
 8004802:	f803 1b01 	strb.w	r1, [r3], #1
 8004806:	e7f9      	b.n	80047fc <memset+0x4>

08004808 <__errno>:
 8004808:	4b01      	ldr	r3, [pc, #4]	@ (8004810 <__errno+0x8>)
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	2000000c 	.word	0x2000000c

08004814 <__libc_init_array>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	2600      	movs	r6, #0
 8004818:	4d0c      	ldr	r5, [pc, #48]	@ (800484c <__libc_init_array+0x38>)
 800481a:	4c0d      	ldr	r4, [pc, #52]	@ (8004850 <__libc_init_array+0x3c>)
 800481c:	1b64      	subs	r4, r4, r5
 800481e:	10a4      	asrs	r4, r4, #2
 8004820:	42a6      	cmp	r6, r4
 8004822:	d109      	bne.n	8004838 <__libc_init_array+0x24>
 8004824:	f000 fa06 	bl	8004c34 <_init>
 8004828:	2600      	movs	r6, #0
 800482a:	4d0a      	ldr	r5, [pc, #40]	@ (8004854 <__libc_init_array+0x40>)
 800482c:	4c0a      	ldr	r4, [pc, #40]	@ (8004858 <__libc_init_array+0x44>)
 800482e:	1b64      	subs	r4, r4, r5
 8004830:	10a4      	asrs	r4, r4, #2
 8004832:	42a6      	cmp	r6, r4
 8004834:	d105      	bne.n	8004842 <__libc_init_array+0x2e>
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	f855 3b04 	ldr.w	r3, [r5], #4
 800483c:	4798      	blx	r3
 800483e:	3601      	adds	r6, #1
 8004840:	e7ee      	b.n	8004820 <__libc_init_array+0xc>
 8004842:	f855 3b04 	ldr.w	r3, [r5], #4
 8004846:	4798      	blx	r3
 8004848:	3601      	adds	r6, #1
 800484a:	e7f2      	b.n	8004832 <__libc_init_array+0x1e>
 800484c:	08004c78 	.word	0x08004c78
 8004850:	08004c78 	.word	0x08004c78
 8004854:	08004c78 	.word	0x08004c78
 8004858:	08004c7c 	.word	0x08004c7c

0800485c <log>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	4604      	mov	r4, r0
 8004860:	460d      	mov	r5, r1
 8004862:	f000 f835 	bl	80048d0 <__ieee754_log>
 8004866:	4622      	mov	r2, r4
 8004868:	4606      	mov	r6, r0
 800486a:	460f      	mov	r7, r1
 800486c:	462b      	mov	r3, r5
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fc f8c3 	bl	80009fc <__aeabi_dcmpun>
 8004876:	b998      	cbnz	r0, 80048a0 <log+0x44>
 8004878:	2200      	movs	r2, #0
 800487a:	2300      	movs	r3, #0
 800487c:	4620      	mov	r0, r4
 800487e:	4629      	mov	r1, r5
 8004880:	f7fc f8b2 	bl	80009e8 <__aeabi_dcmpgt>
 8004884:	b960      	cbnz	r0, 80048a0 <log+0x44>
 8004886:	2200      	movs	r2, #0
 8004888:	2300      	movs	r3, #0
 800488a:	4620      	mov	r0, r4
 800488c:	4629      	mov	r1, r5
 800488e:	f7fc f883 	bl	8000998 <__aeabi_dcmpeq>
 8004892:	b140      	cbz	r0, 80048a6 <log+0x4a>
 8004894:	f7ff ffb8 	bl	8004808 <__errno>
 8004898:	2322      	movs	r3, #34	@ 0x22
 800489a:	2600      	movs	r6, #0
 800489c:	4f06      	ldr	r7, [pc, #24]	@ (80048b8 <log+0x5c>)
 800489e:	6003      	str	r3, [r0, #0]
 80048a0:	4630      	mov	r0, r6
 80048a2:	4639      	mov	r1, r7
 80048a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a6:	f7ff ffaf 	bl	8004808 <__errno>
 80048aa:	2321      	movs	r3, #33	@ 0x21
 80048ac:	6003      	str	r3, [r0, #0]
 80048ae:	4803      	ldr	r0, [pc, #12]	@ (80048bc <log+0x60>)
 80048b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048b4:	f000 b804 	b.w	80048c0 <nan>
 80048b8:	fff00000 	.word	0xfff00000
 80048bc:	08004c76 	.word	0x08004c76

080048c0 <nan>:
 80048c0:	2000      	movs	r0, #0
 80048c2:	4901      	ldr	r1, [pc, #4]	@ (80048c8 <nan+0x8>)
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	7ff80000 	.word	0x7ff80000
 80048cc:	00000000 	.word	0x00000000

080048d0 <__ieee754_log>:
 80048d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d4:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	460d      	mov	r5, r1
 80048de:	b087      	sub	sp, #28
 80048e0:	da24      	bge.n	800492c <__ieee754_log+0x5c>
 80048e2:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80048e6:	4304      	orrs	r4, r0
 80048e8:	d108      	bne.n	80048fc <__ieee754_log+0x2c>
 80048ea:	2200      	movs	r2, #0
 80048ec:	2300      	movs	r3, #0
 80048ee:	2000      	movs	r0, #0
 80048f0:	49cb      	ldr	r1, [pc, #812]	@ (8004c20 <__ieee754_log+0x350>)
 80048f2:	f7fb ff13 	bl	800071c <__aeabi_ddiv>
 80048f6:	b007      	add	sp, #28
 80048f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fc:	2900      	cmp	r1, #0
 80048fe:	da04      	bge.n	800490a <__ieee754_log+0x3a>
 8004900:	f7fb fc2a 	bl	8000158 <__aeabi_dsub>
 8004904:	2200      	movs	r2, #0
 8004906:	2300      	movs	r3, #0
 8004908:	e7f3      	b.n	80048f2 <__ieee754_log+0x22>
 800490a:	2200      	movs	r2, #0
 800490c:	4bc5      	ldr	r3, [pc, #788]	@ (8004c24 <__ieee754_log+0x354>)
 800490e:	f7fb fddb 	bl	80004c8 <__aeabi_dmul>
 8004912:	460b      	mov	r3, r1
 8004914:	460d      	mov	r5, r1
 8004916:	4602      	mov	r2, r0
 8004918:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800491c:	48c2      	ldr	r0, [pc, #776]	@ (8004c28 <__ieee754_log+0x358>)
 800491e:	4285      	cmp	r5, r0
 8004920:	dd06      	ble.n	8004930 <__ieee754_log+0x60>
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	f7fb fc19 	bl	800015c <__adddf3>
 800492a:	e7e4      	b.n	80048f6 <__ieee754_log+0x26>
 800492c:	2100      	movs	r1, #0
 800492e:	e7f5      	b.n	800491c <__ieee754_log+0x4c>
 8004930:	152c      	asrs	r4, r5, #20
 8004932:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8004936:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800493a:	440c      	add	r4, r1
 800493c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8004940:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8004944:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8004948:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 800494c:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8004950:	ea41 0305 	orr.w	r3, r1, r5
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	2200      	movs	r2, #0
 800495a:	4bb4      	ldr	r3, [pc, #720]	@ (8004c2c <__ieee754_log+0x35c>)
 800495c:	f7fb fbfc 	bl	8000158 <__aeabi_dsub>
 8004960:	1cab      	adds	r3, r5, #2
 8004962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004966:	2b02      	cmp	r3, #2
 8004968:	4682      	mov	sl, r0
 800496a:	468b      	mov	fp, r1
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8004974:	dc53      	bgt.n	8004a1e <__ieee754_log+0x14e>
 8004976:	2300      	movs	r3, #0
 8004978:	f7fc f80e 	bl	8000998 <__aeabi_dcmpeq>
 800497c:	b1d0      	cbz	r0, 80049b4 <__ieee754_log+0xe4>
 800497e:	2c00      	cmp	r4, #0
 8004980:	f000 8120 	beq.w	8004bc4 <__ieee754_log+0x2f4>
 8004984:	4620      	mov	r0, r4
 8004986:	f7fb fd35 	bl	80003f4 <__aeabi_i2d>
 800498a:	a391      	add	r3, pc, #580	@ (adr r3, 8004bd0 <__ieee754_log+0x300>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	4606      	mov	r6, r0
 8004992:	460f      	mov	r7, r1
 8004994:	f7fb fd98 	bl	80004c8 <__aeabi_dmul>
 8004998:	a38f      	add	r3, pc, #572	@ (adr r3, 8004bd8 <__ieee754_log+0x308>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	4604      	mov	r4, r0
 80049a0:	460d      	mov	r5, r1
 80049a2:	4630      	mov	r0, r6
 80049a4:	4639      	mov	r1, r7
 80049a6:	f7fb fd8f 	bl	80004c8 <__aeabi_dmul>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4620      	mov	r0, r4
 80049b0:	4629      	mov	r1, r5
 80049b2:	e7b8      	b.n	8004926 <__ieee754_log+0x56>
 80049b4:	a38a      	add	r3, pc, #552	@ (adr r3, 8004be0 <__ieee754_log+0x310>)
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	4650      	mov	r0, sl
 80049bc:	4659      	mov	r1, fp
 80049be:	f7fb fd83 	bl	80004c8 <__aeabi_dmul>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	2000      	movs	r0, #0
 80049c8:	4999      	ldr	r1, [pc, #612]	@ (8004c30 <__ieee754_log+0x360>)
 80049ca:	f7fb fbc5 	bl	8000158 <__aeabi_dsub>
 80049ce:	4652      	mov	r2, sl
 80049d0:	4606      	mov	r6, r0
 80049d2:	460f      	mov	r7, r1
 80049d4:	465b      	mov	r3, fp
 80049d6:	4650      	mov	r0, sl
 80049d8:	4659      	mov	r1, fp
 80049da:	f7fb fd75 	bl	80004c8 <__aeabi_dmul>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4630      	mov	r0, r6
 80049e4:	4639      	mov	r1, r7
 80049e6:	f7fb fd6f 	bl	80004c8 <__aeabi_dmul>
 80049ea:	4606      	mov	r6, r0
 80049ec:	460f      	mov	r7, r1
 80049ee:	b914      	cbnz	r4, 80049f6 <__ieee754_log+0x126>
 80049f0:	4632      	mov	r2, r6
 80049f2:	463b      	mov	r3, r7
 80049f4:	e0a0      	b.n	8004b38 <__ieee754_log+0x268>
 80049f6:	4620      	mov	r0, r4
 80049f8:	f7fb fcfc 	bl	80003f4 <__aeabi_i2d>
 80049fc:	a374      	add	r3, pc, #464	@ (adr r3, 8004bd0 <__ieee754_log+0x300>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	4680      	mov	r8, r0
 8004a04:	4689      	mov	r9, r1
 8004a06:	f7fb fd5f 	bl	80004c8 <__aeabi_dmul>
 8004a0a:	a373      	add	r3, pc, #460	@ (adr r3, 8004bd8 <__ieee754_log+0x308>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	4604      	mov	r4, r0
 8004a12:	460d      	mov	r5, r1
 8004a14:	4640      	mov	r0, r8
 8004a16:	4649      	mov	r1, r9
 8004a18:	f7fb fd56 	bl	80004c8 <__aeabi_dmul>
 8004a1c:	e0a5      	b.n	8004b6a <__ieee754_log+0x29a>
 8004a1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004a22:	f7fb fb9b 	bl	800015c <__adddf3>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4650      	mov	r0, sl
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	f7fb fe75 	bl	800071c <__aeabi_ddiv>
 8004a32:	e9cd 0100 	strd	r0, r1, [sp]
 8004a36:	4620      	mov	r0, r4
 8004a38:	f7fb fcdc 	bl	80003f4 <__aeabi_i2d>
 8004a3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	f7fb fd3e 	bl	80004c8 <__aeabi_dmul>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a54:	f7fb fd38 	bl	80004c8 <__aeabi_dmul>
 8004a58:	a363      	add	r3, pc, #396	@ (adr r3, 8004be8 <__ieee754_log+0x318>)
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	4680      	mov	r8, r0
 8004a60:	4689      	mov	r9, r1
 8004a62:	f7fb fd31 	bl	80004c8 <__aeabi_dmul>
 8004a66:	a362      	add	r3, pc, #392	@ (adr r3, 8004bf0 <__ieee754_log+0x320>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f7fb fb76 	bl	800015c <__adddf3>
 8004a70:	4642      	mov	r2, r8
 8004a72:	464b      	mov	r3, r9
 8004a74:	f7fb fd28 	bl	80004c8 <__aeabi_dmul>
 8004a78:	a35f      	add	r3, pc, #380	@ (adr r3, 8004bf8 <__ieee754_log+0x328>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb fb6d 	bl	800015c <__adddf3>
 8004a82:	4642      	mov	r2, r8
 8004a84:	464b      	mov	r3, r9
 8004a86:	f7fb fd1f 	bl	80004c8 <__aeabi_dmul>
 8004a8a:	a35d      	add	r3, pc, #372	@ (adr r3, 8004c00 <__ieee754_log+0x330>)
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f7fb fb64 	bl	800015c <__adddf3>
 8004a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a98:	f7fb fd16 	bl	80004c8 <__aeabi_dmul>
 8004a9c:	a35a      	add	r3, pc, #360	@ (adr r3, 8004c08 <__ieee754_log+0x338>)
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	f7fb fd0d 	bl	80004c8 <__aeabi_dmul>
 8004aae:	a358      	add	r3, pc, #352	@ (adr r3, 8004c10 <__ieee754_log+0x340>)
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f7fb fb52 	bl	800015c <__adddf3>
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	f7fb fd04 	bl	80004c8 <__aeabi_dmul>
 8004ac0:	a355      	add	r3, pc, #340	@ (adr r3, 8004c18 <__ieee754_log+0x348>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f7fb fb49 	bl	800015c <__adddf3>
 8004aca:	4642      	mov	r2, r8
 8004acc:	464b      	mov	r3, r9
 8004ace:	f7fb fcfb 	bl	80004c8 <__aeabi_dmul>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ada:	f7fb fb3f 	bl	800015c <__adddf3>
 8004ade:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8004ae2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8004ae6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8004aea:	3551      	adds	r5, #81	@ 0x51
 8004aec:	4335      	orrs	r5, r6
 8004aee:	2d00      	cmp	r5, #0
 8004af0:	4680      	mov	r8, r0
 8004af2:	4689      	mov	r9, r1
 8004af4:	dd48      	ble.n	8004b88 <__ieee754_log+0x2b8>
 8004af6:	2200      	movs	r2, #0
 8004af8:	4b4d      	ldr	r3, [pc, #308]	@ (8004c30 <__ieee754_log+0x360>)
 8004afa:	4650      	mov	r0, sl
 8004afc:	4659      	mov	r1, fp
 8004afe:	f7fb fce3 	bl	80004c8 <__aeabi_dmul>
 8004b02:	4652      	mov	r2, sl
 8004b04:	465b      	mov	r3, fp
 8004b06:	f7fb fcdf 	bl	80004c8 <__aeabi_dmul>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4606      	mov	r6, r0
 8004b10:	460f      	mov	r7, r1
 8004b12:	4640      	mov	r0, r8
 8004b14:	4649      	mov	r1, r9
 8004b16:	f7fb fb21 	bl	800015c <__adddf3>
 8004b1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b1e:	f7fb fcd3 	bl	80004c8 <__aeabi_dmul>
 8004b22:	4680      	mov	r8, r0
 8004b24:	4689      	mov	r9, r1
 8004b26:	b964      	cbnz	r4, 8004b42 <__ieee754_log+0x272>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	4639      	mov	r1, r7
 8004b30:	f7fb fb12 	bl	8000158 <__aeabi_dsub>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4650      	mov	r0, sl
 8004b3a:	4659      	mov	r1, fp
 8004b3c:	f7fb fb0c 	bl	8000158 <__aeabi_dsub>
 8004b40:	e6d9      	b.n	80048f6 <__ieee754_log+0x26>
 8004b42:	a323      	add	r3, pc, #140	@ (adr r3, 8004bd0 <__ieee754_log+0x300>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b4c:	f7fb fcbc 	bl	80004c8 <__aeabi_dmul>
 8004b50:	a321      	add	r3, pc, #132	@ (adr r3, 8004bd8 <__ieee754_log+0x308>)
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	4604      	mov	r4, r0
 8004b58:	460d      	mov	r5, r1
 8004b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b5e:	f7fb fcb3 	bl	80004c8 <__aeabi_dmul>
 8004b62:	4642      	mov	r2, r8
 8004b64:	464b      	mov	r3, r9
 8004b66:	f7fb faf9 	bl	800015c <__adddf3>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4630      	mov	r0, r6
 8004b70:	4639      	mov	r1, r7
 8004b72:	f7fb faf1 	bl	8000158 <__aeabi_dsub>
 8004b76:	4652      	mov	r2, sl
 8004b78:	465b      	mov	r3, fp
 8004b7a:	f7fb faed 	bl	8000158 <__aeabi_dsub>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4620      	mov	r0, r4
 8004b84:	4629      	mov	r1, r5
 8004b86:	e7d9      	b.n	8004b3c <__ieee754_log+0x26c>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4650      	mov	r0, sl
 8004b8e:	4659      	mov	r1, fp
 8004b90:	f7fb fae2 	bl	8000158 <__aeabi_dsub>
 8004b94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b98:	f7fb fc96 	bl	80004c8 <__aeabi_dmul>
 8004b9c:	4606      	mov	r6, r0
 8004b9e:	460f      	mov	r7, r1
 8004ba0:	2c00      	cmp	r4, #0
 8004ba2:	f43f af25 	beq.w	80049f0 <__ieee754_log+0x120>
 8004ba6:	a30a      	add	r3, pc, #40	@ (adr r3, 8004bd0 <__ieee754_log+0x300>)
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bb0:	f7fb fc8a 	bl	80004c8 <__aeabi_dmul>
 8004bb4:	a308      	add	r3, pc, #32	@ (adr r3, 8004bd8 <__ieee754_log+0x308>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	4604      	mov	r4, r0
 8004bbc:	460d      	mov	r5, r1
 8004bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bc2:	e729      	b.n	8004a18 <__ieee754_log+0x148>
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	e695      	b.n	80048f6 <__ieee754_log+0x26>
 8004bca:	bf00      	nop
 8004bcc:	f3af 8000 	nop.w
 8004bd0:	fee00000 	.word	0xfee00000
 8004bd4:	3fe62e42 	.word	0x3fe62e42
 8004bd8:	35793c76 	.word	0x35793c76
 8004bdc:	3dea39ef 	.word	0x3dea39ef
 8004be0:	55555555 	.word	0x55555555
 8004be4:	3fd55555 	.word	0x3fd55555
 8004be8:	df3e5244 	.word	0xdf3e5244
 8004bec:	3fc2f112 	.word	0x3fc2f112
 8004bf0:	96cb03de 	.word	0x96cb03de
 8004bf4:	3fc74664 	.word	0x3fc74664
 8004bf8:	94229359 	.word	0x94229359
 8004bfc:	3fd24924 	.word	0x3fd24924
 8004c00:	55555593 	.word	0x55555593
 8004c04:	3fe55555 	.word	0x3fe55555
 8004c08:	d078c69f 	.word	0xd078c69f
 8004c0c:	3fc39a09 	.word	0x3fc39a09
 8004c10:	1d8e78af 	.word	0x1d8e78af
 8004c14:	3fcc71c5 	.word	0x3fcc71c5
 8004c18:	9997fa04 	.word	0x9997fa04
 8004c1c:	3fd99999 	.word	0x3fd99999
 8004c20:	c3500000 	.word	0xc3500000
 8004c24:	43500000 	.word	0x43500000
 8004c28:	7fefffff 	.word	0x7fefffff
 8004c2c:	3ff00000 	.word	0x3ff00000
 8004c30:	3fe00000 	.word	0x3fe00000

08004c34 <_init>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	bf00      	nop
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr

08004c40 <_fini>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr
